{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Learn to build, share and run your contanerised applications easily with Docker</p>"},{"location":"#overview","title":"Overview","text":"<ul> <li>Getting Started<ul> <li>Creating Your DockerHub Account</li> </ul> </li> <li> <p>Getting Started with Docker Image</p> <ul> <li>Running Hello World Example</li> </ul> </li> <li> <p>Working with Docker Image</p> <ul> <li>Saving Images and Containers as Tar Files for Sharing</li> <li>Building Your First Alpine Docker Image and Push it to DockerHub</li> <li>Accessing &amp; Managing Docker Container</li> <li>Accessing the Container Shell</li> <li>Running a Command inside running Container</li> <li>Managing Docker Containers</li> </ul> </li> <li> <p>Getting Started with Dockerfile</p> <ul> <li>What is Dockerfile</li> <li>Understanding Layering Concept with Dockerfile</li> <li>Creating Docker Image with<ul> <li>Lab #1: Installing GIT</li> <li>Lab #2: ADD instruction</li> <li>Lab #3: COPY instruction</li> <li>Lab #4: CMD instruction</li> <li>Lab #5: ENTRYPOINT instruction</li> <li>Lab #6: WORKDIR instruction</li> <li>Lab #7: RUN instruction</li> <li>Lab #8: ARG instruction</li> <li>Lab #9: ENV instruction</li> <li>Lab #10: VOLUME instruction</li> <li>Lab #11: EXPOSE instruction</li> <li>Lab #12: LABEL instruction</li> <li>Lab #13: ONBUILD instruction</li> <li>Lab #14: HEALTHCHECK instruction</li> <li>Lab #15: SHELL instruction</li> <li>Lab #16: Entrypoint Vs RUN</li> <li>Lab #17: USER instruction</li> </ul> </li> <li>Writing Dockerfile with Hello Python Script Added</li> </ul> </li> <li> <p>Creating Private Docker Registry</p> <ul> <li>Building a Private Docker Registry</li> <li>Building a Private Docker Registry with UI</li> </ul> </li> <li> <p>Docker Volumes</p> <ul> <li>Managing volumes through Docker CLI</li> <li>Creating Volume Mount from docker run command &amp; sharing same Volume Mounts among multiple containers</li> </ul> </li> <li> <p>Docker Networking</p> <ul> <li>The docker network Command</li> <li>Lab #1: Listing the Networks</li> <li>Lab #2: Inspecting a Network</li> <li>Lab #3: List network driver plugins</li> <li>Lab #4: Docker Bridge Networking</li> <li>Lab #5: Basics of Docker Bridge Networking</li> <li>Lab #6: Connect a Docker container to bridge network</li> <li>Lab #7: Test Network Connectivity</li> <li>Lab #8: Configure NAT for external connectivity</li> </ul> </li> </ul>"},{"location":"2_Installation/docker-desktop-for-linux/","title":"To install Docker Desktop for Linux on Ubuntu, you can follow these steps:","text":"<ol> <li> <p>Download the .deb package from the official Docker website.</p> </li> <li> <p>Install the package using the command: </p> </li> </ol> <p><code>sudo dpkg -i &lt;package-name&gt;.deb</code></p> <ol> <li>Start the Docker Desktop service:</li> </ol> <p><code>sudo systemctl start docker</code></p> <ol> <li>Verify that Docker is running by checking its status:</li> </ol> <p><code>sudo systemctl status docker</code></p>"},{"location":"2_Installation/docker-desktop-for-mac/","title":"Installing Docker Desktop for Mac","text":"<p>Docker Desktop is free for small businesses (fewer than 250 employees AND less than $10 million in annual revenue), personal use, education, and non-commercial open-source projects. Otherwise, it requires a paid subscription for professional use. Paid subscriptions are also required for government entities. When downloading and installing Docker Desktop, you are asked to agree to the Docker Subscription Service Agreement</p>"},{"location":"2_Installation/docker-desktop-for-mac/#download-docker-desktop-for-mac","title":"Download Docker Desktop for Mac","text":"<ul> <li>Apple Silicon</li> <li>Intel Chip</li> </ul>"},{"location":"2_Installation/docker-desktop-for-mac/#install-interactively","title":"Install interactively","text":"<ol> <li> <p>Double-click <code>Docker.dmg</code> to open the installer, then drag the Docker icon to     the Applications folder.</p> </li> <li> <p>Double-click <code>Docker.app</code> in the Applications folder to start Docker.</p> </li> <li> <p>The Docker menu (whale menu) displays the Docker Subscription Service Agreement window.</p> </li> <li> <p>Select Accept to continue. Docker Desktop starts after you accept the terms.</p> </li> </ol> <p></p>"},{"location":"2_Installation/docker-on-jetson-nano/","title":"Getting Started with NVIDIA Jetson Nano","text":""},{"location":"2_Installation/docker-on-jetson-nano/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Intent</li> <li>Hardware</li> <li>Software</li> <li>Preparing Your Jetson Nano</li> <li>Flashing SD card image</li> <li>Vefifying Docker Binaries</li> </ol>"},{"location":"2_Installation/docker-on-jetson-nano/#intent","title":"Intent","text":"<p>Everything and anything you want to know about NVIDIA Jetson Nano, Docker &amp; K3s support</p>"},{"location":"2_Installation/docker-on-jetson-nano/#hardware","title":"Hardware","text":"<ul> <li>Jetson Nano</li> <li>A Camera Module</li> <li>A 5V 4Ampere Charger</li> <li>64GB SD card</li> </ul>"},{"location":"2_Installation/docker-on-jetson-nano/#software","title":"Software","text":"<ul> <li>Jetson SD card image from https://developer.nvidia.com/embedded/downloads</li> <li>Etcher software installed on your system</li> </ul>"},{"location":"2_Installation/docker-on-jetson-nano/#preparing-your-jetson-nano","title":"Preparing Your Jetson Nano","text":""},{"location":"2_Installation/docker-on-jetson-nano/#1-preparing-your-raspberry-pi-flashing-jetson-sd-card-image","title":"1. Preparing Your Raspberry Pi Flashing Jetson SD Card Image","text":"<ul> <li>Unzip the SD card image</li> <li>Insert SD card into your system. </li> <li>Bring up Etcher tool and select the target SD card to which you want to flash the image.</li> </ul> <pre><code>sudo lshw -C system\npico2                       \n    description: Computer\n    product: NVIDIA Jetson Nano Developer Kit\n    serial: 1422919082257\n    width: 64 bits\n    capabilities: smp cp15_barrier setend swp\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#cuda-compiler-and-libraries","title":"CUDA Compiler and Libraries","text":"<pre><code>ajeetraina@ajeetraina-desktop:~/meetup$ nvcc --version\n-bash: nvcc: command not found\najeetraina@ajeetraina-desktop:~/meetup$ export PATH=${PATH}:/usr/local/cuda/bin\najeetraina@ajeetraina-desktop:~/meetup$ export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64\najeetraina@ajeetraina-desktop:~/meetup$ source ~/.bashrc\najeetraina@ajeetraina-desktop:~/meetup$ nvcc --version\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2019 NVIDIA Corporation\nBuilt on Wed_Oct_23_21:14:42_PDT_2019\nCuda compilation tools, release 10.2, V10.2.89\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#devicequery","title":"DeviceQuery","text":"<pre><code>$ pwd\n\n/usr/local/cuda/samples/1_Utilities/deviceQuery\nsudo make\n</code></pre> <pre><code>ajeetraina@ajeetraina-desktop:/usr/local/cuda/samples/1_Utilities/deviceQuery$ sudo make\n/usr/local/cuda-10.2/bin/nvcc -ccbin g++ -I../../common/inc  -m64    -gencode arch=compute_30,code=sm_30 -gencode arch=compute_32,code=sm_32 -gencode arch=compute_53,code=sm_53 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_62,code=sm_62 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_72,code=sm_72 -gencode arch=compute_75,code=sm_75 -gencode arch=compute_75,code=compute_75 -o deviceQuery.o -c deviceQuery.cpp\n/usr/local/cuda-10.2/bin/nvcc -ccbin g++   -m64      -gencode arch=compute_30,code=sm_30 -gencode arch=compute_32,code=sm_32 -gencode arch=compute_53,code=sm_53 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_62,code=sm_62 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_72,code=sm_72 -gencode arch=compute_75,code=sm_75 -gencode arch=compute_75,code=compute_75 -o deviceQuery deviceQuery.o\nmkdir -p ../../bin/aarch64/linux/release\ncp deviceQuery ../../bin/aarch64/linux/release\najeetraina@ajeetraina-desktop:/usr/local/cuda/samples/1_Utilities/deviceQuery$ ls\nMakefile  NsightEclipse.xml  deviceQuery  deviceQuery.cpp  deviceQuery.o  readme.txt\najeetraina@ajeetraina-desktop:/usr/local/cuda/samples/1_Utilities/deviceQuery$ ./deviceQuery\n./deviceQuery Starting...\n\n CUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"NVIDIA Tegra X1\"\n  CUDA Driver Version / Runtime Version          10.2 / 10.2\n  CUDA Capability Major/Minor version number:    5.3\n  Total amount of global memory:                 3956 MBytes (4148387840 bytes)\n  ( 1) Multiprocessors, (128) CUDA Cores/MP:     128 CUDA Cores\n  GPU Max Clock rate:                            922 MHz (0.92 GHz)\n  Memory Clock rate:                             13 Mhz\n  Memory Bus Width:                              64-bit\n  L2 Cache Size:                                 262144 bytes\n  Maximum Texture Dimension Size (x,y,z)         1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096)\n  Maximum Layered 1D Texture Size, (num) layers  1D=(16384), 2048 layers\n  Maximum Layered 2D Texture Size, (num) layers  2D=(16384, 16384), 2048 layers\n  Total amount of constant memory:               65536 bytes\n  Total amount of shared memory per block:       49152 bytes\n  Total number of registers available per block: 32768\n  Warp size:                                     32\n  Maximum number of threads per multiprocessor:  2048\n  Maximum number of threads per block:           1024\n  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n  Maximum memory pitch:                          2147483647 bytes\n  Texture alignment:                             512 bytes\n  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)\n  Run time limit on kernels:                     Yes\n  Integrated GPU sharing Host Memory:            Yes\n  Support host page-locked memory mapping:       Yes\n  Alignment requirement for Surfaces:            Yes\n  Device has ECC support:                        Disabled\n  Device supports Unified Addressing (UVA):      Yes\n  Device supports Compute Preemption:            No\n  Supports Cooperative Kernel Launch:            No\n  Supports MultiDevice Co-op Kernel Launch:      No\n  Device PCI Domain ID / Bus ID / location ID:   0 / 0 / 0\n  Compute Mode:\n     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1\nResult = PASS\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#2-verifying-if-it-is-shipped-with-docker-binaries","title":"2. Verifying if it is shipped with Docker Binaries","text":"<pre><code>ajeetraina@ajeetraina-desktop:~$ sudo docker version\n[sudo] password for ajeetraina: \nClient:\n Version:           19.03.6\n API version:       1.40\n Go version:        go1.12.17\n Git commit:        369ce74a3c\n Built:             Fri Feb 28 23:47:53 2020\n OS/Arch:           linux/arm64\n Experimental:      false\n\nServer:\n Engine:\n  Version:          19.03.6\n  API version:      1.40 (minimum version 1.12)\n  Go version:       go1.12.17\n  Git commit:       369ce74a3c\n  Built:            Wed Feb 19 01:06:16 2020\n  OS/Arch:          linux/arm64\n  Experimental:     false\n containerd:\n  Version:          1.3.3-0ubuntu1~18.04.2\n  GitCommit:        \n runc:\n  Version:          spec: 1.0.1-dev\n  GitCommit:        \n docker-init:\n  Version:          0.18.0\n  GitCommit:       \n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#3-checking-docker-runtime","title":"3. Checking Docker runtime","text":"<p>Starting with JetPack 4.2, NVIDIA has introduced a container runtime with Docker integration. This custom runtime enables Docker containers to access the underlying GPUs available in the Jetson family.</p> <pre><code>pico@pico1:/tmp/docker-build$ sudo nvidia-docker version\nNVIDIA Docker: 2.0.3\nClient:\n Version:           19.03.6\n API version:       1.40\n Go version:        go1.12.17\n Git commit:        369ce74a3c\n Built:             Fri Feb 28 23:47:53 2020\n OS/Arch:           linux/arm64\n Experimental:      false\n\nServer:\n Engine:\n  Version:          19.03.6\n  API version:      1.40 (minimum version 1.12)\n  Go version:       go1.12.17\n  Git commit:       369ce74a3c\n  Built:            Wed Feb 19 01:06:16 2020\n  OS/Arch:          linux/arm64\n  Experimental:     false\n containerd:\n  Version:          1.3.3-0ubuntu1~18.04.2\n  GitCommit:        \n runc:\n  Version:          spec: 1.0.1-dev\n  GitCommit:        \n docker-init:\n  Version:          0.18.0\n  GitCommit:\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#installing-docker-compose-on-nvidia-jetson-nano","title":"Installing Docker Compose on NVIDIA Jetson Nano","text":"<p>Jetson Nano doesnt come with Docker Compose installed by default. You will need to install it first:</p> <pre><code>export DOCKER_COMPOSE_VERSION=1.27.4\nsudo apt-get install libhdf5-dev\nsudo apt-get install libssl-dev\nsudo pip3 install docker-compose==\"${DOCKER_COMPOSE_VERSION}\"\napt install python3\napt install python3-pip\npip install docker-compose\n</code></pre> <pre><code>docker-compose version\ndocker-compose version 1.26.2, build unknown\ndocker-py version: 4.3.1\nCPython version: 3.6.9\nOpenSSL version: OpenSSL 1.1.1  11 Sep 2018\n</code></pre> <p>Next, add default runtime for NVIDIA:</p> <p>Edit /etc/docker/daemon.json</p> <pre><code>{\n    \"runtimes\": {\n        \"nvidia\": {\n            \"path\": \"/usr/bin/nvidia-container-runtime\",\n            \"runtimeArgs\": []\n        }\n    },\n\n    \"default-runtime\": \"nvidia\",\n    \"node-generic-resources\": [ \"NVIDIA-GPU=0\" ]\n}\n\n</code></pre> <p>Restart the Docker Daemon</p> <pre><code>systemctl restart docker\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#identify-the-jetson-board","title":"Identify the Jetson board","text":"<pre><code>pico@pico1:~$ git clone https://github.com/jetsonhacks/jetsonUtilities\nCloning into 'jetsonUtilities'...\nremote: Enumerating objects: 123, done.\nremote: Counting objects: 100% (39/39), done.\nremote: Compressing objects: 100% (30/30), done.\nremote: Total 123 (delta 15), reused 23 (delta 8), pack-reused 84\nReceiving objects: 100% (123/123), 32.87 KiB | 5.48 MiB/s, done.\nResolving deltas: 100% (49/49), done.\npico@pico1:~$ cd jetson\n-bash: cd: jetson: No such file or directory\npico@pico1:~$ cd jetsonUtilities/\n</code></pre> <pre><code>pico@pico1:~/jetsonUtilities$ ls\nLICENSE  README.md  jetsonInfo.py  scripts\n\npico@pico1:~/jetsonUtilities$ python3 jetsonInfo.py \nNVIDIA Jetson Nano (Developer Kit Version)\n L4T 32.4.4 [ JetPack 4.4.1 ]\n   Ubuntu 18.04.5 LTS\n   Kernel Version: 4.9.140-tegra\n CUDA 10.2.89\n   CUDA Architecture: 5.3\n OpenCV version: 4.1.1\n   OpenCV Cuda: NO\n CUDNN: 8.0.0.180\n TensorRT: 7.1.3.0\n Vision Works: 1.6.0.501\n VPI: 4.4.1-b50\n Vulcan: 1.2.70\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#install-the-latest-version-of-cuda","title":"Install the latest version of CUDA","text":"<pre><code>wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/sbsa/cuda-ubuntu1804.pin\nsudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600\nwget https://developer.download.nvidia.com/compute/cuda/11.3.1/local_installers/cuda-repo-ubuntu1804-11-3-local_11.3.1-465.19.01-1_arm64.deb\nsudo dpkg -i cuda-repo-ubuntu1804-11-3-local_11.3.1-465.19.01-1_arm64.deb\nsudo apt-key add /var/cuda-repo-ubuntu1804-11-3-local/7fa2af80.pub\nsudo apt-get update\nsudo apt-get -y install cuda\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#verify-docker-runtime","title":"Verify Docker runtime","text":"<pre><code>docker info | grep runtime\n Runtimes: nvidia runc io.containerd.runc.v2 io.containerd.runtime.v1.linux\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#testing-gpu-support","title":"Testing GPU Support","text":"<p>We\u2019ll use the deviceQuery NVIDIA test application (included in L4T) to check that we can access the GPU in the cluster. First, we\u2019ll create a Docker image with the appropriate software, run it directly as Docker, then run it using containerd ctr and finally on the Kubernetes cluster itself.</p>"},{"location":"2_Installation/docker-on-jetson-nano/#running-devicequery-on-docker-with-gpu-support","title":"Running deviceQuery on Docker with GPU support","text":""},{"location":"2_Installation/docker-on-jetson-nano/#create-a-directory","title":"Create a directory","text":"<pre><code>mkdir test\ncd test\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#copy-the-sample-files","title":"Copy the sample files","text":"<p>Copy the demos where deviceQuery is located to the working directory where the Docker image will be created:</p> <pre><code>cp -R /usr/local/cuda/samples .\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#create-a-dockerfile","title":"Create a Dockerfile","text":"<pre><code>FROM nvcr.io/nvidia/l4t-base:r32.5.0\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends make g++\nCOPY ./samples /tmp/samples\nWORKDIR /tmp/samples/1_Utilities/deviceQuery\nRUN make clean &amp;&amp; make\nCMD [\"./deviceQuery\"]\n</code></pre> <pre><code>sudo docker build -t ajeetraina/jetson_devicequery . -f Dockerfile\n</code></pre> <pre><code>pico@pico2:~/test$ sudo docker run --rm --runtime nvidia ajeetraina/jetson_devicequery:latest\n./deviceQuery Starting...\n\n CUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"NVIDIA Tegra X1\"\n  CUDA Driver Version / Runtime Version          10.2 / 10.2\n  CUDA Capability Major/Minor version number:    5.3\n  Total amount of global memory:                 3963 MBytes (4155383808 bytes)\n  ( 1) Multiprocessors, (128) CUDA Cores/MP:     128 CUDA Cores\n  GPU Max Clock rate:                            922 MHz (0.92 GHz)\n  Memory Clock rate:                             13 Mhz\n  Memory Bus Width:                              64-bit\n  L2 Cache Size:                                 262144 bytes\n  Maximum Texture Dimension Size (x,y,z)         1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096)\n  Maximum Layered 1D Texture Size, (num) layers  1D=(16384), 2048 layers\n  Maximum Layered 2D Texture Size, (num) layers  2D=(16384, 16384), 2048 layers\n  Total amount of constant memory:               65536 bytes\n  Total amount of shared memory per block:       49152 bytes\n  Total number of registers available per block: 32768\n  Warp size:                                     32\n  Maximum number of threads per multiprocessor:  2048\n  Maximum number of threads per block:           1024\n  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n  Maximum memory pitch:                          2147483647 bytes\n  Texture alignment:                             512 bytes\n  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)\n  Run time limit on kernels:                     Yes\n  Integrated GPU sharing Host Memory:            Yes\n  Support host page-locked memory mapping:       Yes\n  Alignment requirement for Surfaces:            Yes\n  Device has ECC support:                        Disabled\n  Device supports Unified Addressing (UVA):      Yes\n  Device supports Compute Preemption:            No\n  Supports Cooperative Kernel Launch:            No\n  Supports MultiDevice Co-op Kernel Launch:      No\n  Device PCI Domain ID / Bus ID / location ID:   0 / 0 / 0\n  Compute Mode:\n     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1\nResult = PASS\n</code></pre> <p>Test 2: Running deviceQuery on containerd with GPU support</p> <p>Since K3s uses containerd as its runtime by default, we will use the ctr command line to test and deploy the deviceQuery image we pushed on containerd with this script:</p> <pre><code>#!/bin/bash\nIMAGE=ajeetraina/jetson_devicequery:latest\nexport KUBECONFIG=/etc/rancher/k3s/k3s.yaml\nctr i pull docker.io/${IMAGE}\nctr run --rm --gpus 0 --tty docker.io/${IMAGE} deviceQuery\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#execute-the-script","title":"Execute the script","text":"<pre><code>sudo sh usectr.sh\n</code></pre> <pre><code>sudo sh usectr.sh \ndocker.io/ajeetraina/jetson_devicequery:latest:                                   resolved       |++++++++++++++++++++++++++++++++++++++| \nmanifest-sha256:dfeaad4046f78871d3852e5d5fb8fa848038c57c34c6554c6c97a00ba120d550: done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:4438ebff930fb27930d802553e13457783ca8a597e917c030aea07f8ff6645c0:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:b1cdeb9e69c95684d703cf96688ed2b333a235d5b33f0843663ff15f62576bd4:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:bf60857fb4964a3e3ce57a900bbe47cd1683587d6c89ecbce4af63f98df600aa:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:0aac5305d11a81f47ed76d9663a8d80d2963b61c643acfce0515f0be56f5e301:    done           |++++++++++++++++++++++++++++++++++++++| \nconfig-sha256:37987db6d6570035e25e713f41e665a6d471d25056bb56b4310ed1cb1d79a100:   done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:f0f57d03cad8f8d69b1addf90907b031ccb253b5a9fc5a11db83c51aa311cbfb:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:08c23323368d4fde5347276d543c500e1ff9b712024ca3f85172018e9440d8b0:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:04da93b342eb651d6b94c74a934a3290697573a907fa0a06067b538095601745:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:f84ceb6e8887e9b3b454813459ee97c2b9730869dbd37d4cca4051958b7a5a36:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:93752947af53e2a3225e145b359b956df36e20521b5dde0fe6d3fb92fd2a9538:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:b235194751dee33624fc154603f7e25ecdfbb02538fb7d55fa796df9afa95fee:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:905b1329c1d473c79650e33b882d980b3522fb72e58ecd3456c4fb3c4039fe92:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:8931d5ba88b488c949f77f990e8f9198b153ceb71afd0369eac9c39beb38f2d6:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:cfb2938be99fb944fe31165bdf44532a5536865ce53b12eb7758d1e2a51ad33e:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:606a67bb8db9a1111022bdc6406442e11c1a66653136c5c777114bf67b61038a:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:2f37138d1c8ac71d9314a0f8996ba69579bbc6ee6a57440557bc7eef486ed292:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:9ce7ce1da17c2b8149573d1d73132f61a73083f0cd498eeb7a0da404fd77db14:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:a36863a728ec9221c83c745f40511946dfd63beca0f10c9afcc774ef7a98e420:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:86dd6e5994e2c15f2783d8d543327479ccee7f3b20023dd962fdb9a211071e16:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:f5299db1221c515de91f59d84b79f2f839f9c94a5d0cc7fad04134e23ec9b88a:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:15a5811e1a7bf377cbac066b04e0b36b4c1a41ca63eb3c67c17b734577f6beea:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:cb893097de39451407d7167b312ec56eaea80baa041877af8239dbe833fa044b:    done           |++++++++++++++++++++++++++++++++++++++| \nelapsed: 81.4s                                                                    total:  305.5  (3.8 MiB/s)                                       \nunpacking linux/arm64/v8 sha256:dfeaad4046f78871d3852e5d5fb8fa848038c57c34c6554c6c97a00ba120d550...\n\ndone\n\n./deviceQuery Starting...\n\n CUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"NVIDIA Tegra X1\"\n  CUDA Driver Version / Runtime Version          10.2 / 10.2\n  CUDA Capability Major/Minor version number:    5.3\n  Total amount of global memory:                 3963 MBytes (4155383808 bytes)\n  ( 1) Multiprocessors, (128) CUDA Cores/MP:     128 CUDA Cores\n  GPU Max Clock rate:                            922 MHz (0.92 GHz)\n  Memory Clock rate:                             13 Mhz\n  Memory Bus Width:                              64-bit\n  L2 Cache Size:                                 262144 bytes\n  Maximum Texture Dimension Size (x,y,z)         1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096)\n  Maximum Layered 1D Texture Size, (num) layers  1D=(16384), 2048 layers\n  Maximum Layered 2D Texture Size, (num) layers  2D=(16384, 16384), 2048 layers\n  Total amount of constant memory:               65536 bytes\n  Total amount of shared memory per block:       49152 bytes\n  Total number of registers available per block: 32768\n  Warp size:                                     32\n  Maximum number of threads per multiprocessor:  2048\n  Maximum number of threads per block:           1024\n  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n  Maximum memory pitch:                          2147483647 bytes\n  Texture alignment:                             512 bytes\n  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)\n  Run time limit on kernels:                     Yes\n  Integrated GPU sharing Host Memory:            Yes\n  Support host page-locked memory mapping:       Yes\n  Alignment requirement for Surfaces:            Yes\n  Device has ECC support:                        Disabled\n  Device supports Unified Addressing (UVA):      Yes\n  Device supports Compute Preemption:            No\n  Supports Cooperative Kernel Launch:            No\n  Supports MultiDevice Co-op Kernel Launch:      No\n  Device PCI Domain ID / Bus ID / location ID:   0 / 0 / 0\n  Compute Mode:\n     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1\nResult = PASS\n\n\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#test-3-running-devicequery-on-the-k3s-cluster","title":"Test 3: Running deviceQuery on the K3s cluster","text":"<pre><code>pico@pico2:~/test$ cat pod_deviceQuery.yaml \napiVersion: v1\nkind: Pod\nmetadata:\n  name: devicequery\nspec:\n  containers:\n    - name: nvidia\n      image: ajeetraina/jetson_devicequery:latest\n\n      command: [ \"./deviceQuery\" ]\npico@pico2:~/test$\n</code></pre> <pre><code>sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml kubectl apply -f ./pod_deviceQuery.yaml\npod/devicequery created\n</code></pre> <pre><code>pico@pico2:~/test$ sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml kubectl describe pod devicequery\nName:         devicequery\nNamespace:    default\nPriority:     0\nNode:         pico4/192.168.1.163\nStart Time:   Sun, 13 Jun 2021 09:16:44 -0700\nLabels:       &lt;none&gt;\nAnnotations:  &lt;none&gt;\nStatus:       Pending\nIP:           \nIPs:          &lt;none&gt;\nContainers:\n  nvidia:\n    Container ID:  \n    Image:         ajeetraina/jetson_devicequery:latest\n    Image ID:      \n    Port:          &lt;none&gt;\n    Host Port:     &lt;none&gt;\n    Command:\n      ./deviceQuery\n    State:          Waiting\n      Reason:       ContainerCreating\n    Ready:          False\n    Restart Count:  0\n    Environment:    &lt;none&gt;\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-mcrmv (ro)\nConditions:\n  Type              Status\n  Initialized       True \n  Ready             False \n  ContainersReady   False \n  PodScheduled      True \nVolumes:\n  kube-api-access-mcrmv:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       &lt;nil&gt;\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              &lt;none&gt;\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ----  ----               -------\n  Normal  Scheduled  78s   default-scheduler  Successfully assigned default/devicequery to pico4\n  Normal  Pulling    77s   kubelet            Pulling image \"ajeetraina/jetson_devicequery:latest\"\npico@pico2:~/test$\n</code></pre> <pre><code>cat pod_deviceQuery_jetson4.yaml \napiVersion: v1\nkind: Pod\nmetadata:\n  name: devicequery\nspec:\n  nodeName: pico4\n  containers:\n    - name: nvidia\n      image: ajeetraina/jetson_devicequery:latest\n      command: [ \"./deviceQuery\" ]\npico@pico2:~/test$ \n</code></pre> <pre><code>pico@pico2:~/test$ sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml kubectl describe pod devicequery\nName:         devicequery\nNamespace:    default\nPriority:     0\nNode:         pico4/192.168.1.163\nStart Time:   Sun, 13 Jun 2021 09:16:44 -0700\nLabels:       &lt;none&gt;\nAnnotations:  &lt;none&gt;\nStatus:       Running\nIP:           10.42.1.3\nIPs:\n  IP:  10.42.1.3\nContainers:\n  nvidia:\n    Container ID:  containerd://fd502d6bfa55e2f80b2d50bc262e6d6543fd8d09e9708bb78ecec0b2e09621c3\n    Image:         ajeetraina/jetson_devicequery:latest\n    Image ID:      docker.io/ajeetraina/jetson_devicequery@sha256:dfeaad4046f78871d3852e5d5fb8fa848038c57c34c6554c6c97a00ba120d550\n    Port:          &lt;none&gt;\n    Host Port:     &lt;none&gt;\n    Command:\n      ./deviceQuery\n    State:          Waiting\n      Reason:       CrashLoopBackOff\n    Last State:     Terminated\n      Reason:       Error\n      Exit Code:    1\n      Started:      Sun, 13 Jun 2021 09:21:50 -0700\n      Finished:     Sun, 13 Jun 2021 09:21:50 -0700\n    Ready:          False\n    Restart Count:  5\n    Environment:    &lt;none&gt;\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-mcrmv (ro)\nConditions:\n  Type              Status\n  Initialized       True \n  Ready             False \n  ContainersReady   False \n  PodScheduled      True \nVolumes:\n  kube-api-access-mcrmv:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       &lt;nil&gt;\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              &lt;none&gt;\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type     Reason     Age                    From               Message\n  ----     ------     ----                   ----               -------\n  Normal   Scheduled  7m51s                  default-scheduler  Successfully assigned default/devicequery to pico4\n  Normal   Pulled     5m45s                  kubelet            Successfully pulled image \"ajeetraina/jetson_devicequery:latest\" in 2m5.699757621s\n  Normal   Pulled     5m43s                  kubelet            Successfully pulled image \"ajeetraina/jetson_devicequery:latest\" in 1.000839703s\n  Normal   Pulled     5m29s                  kubelet            Successfully pulled image \"ajeetraina/jetson_devicequery:latest\" in 967.072951ms\n  Normal   Pulled     4m59s                  kubelet            Successfully pulled image \"ajeetraina/jetson_devicequery:latest\" in 1.025604394s\n  Normal   Created    4m59s (x4 over 5m45s)  kubelet            Created container nvidia\n  Normal   Started    4m59s (x4 over 5m45s)  kubelet            Started container nvidia\n  Warning  BackOff    4m20s (x8 over 5m42s)  kubelet            Back-off restarting failed container\n  Normal   Pulling    2m47s (x6 over 7m51s)  kubelet            Pulling image \"ajeetraina/jetson_devicequery:latest\"\n</code></pre> <pre><code>pico@pico2:~/test$ sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml kubectl apply -f ./pod_deviceQuery_jetson4.yaml\npod/devicequery configured\n</code></pre>"},{"location":"3_Docker-For-Beginners/1_Getting-Started-with-Docker-Hub/docker-hub/","title":"How to create Dockerhub Account","text":"<ul> <li>Open https://hub.docker.com and click on \"Sign Up\" for DockerHub</li> </ul> <ul> <li>Enter your username as DockerID and provide your email address( I would suggest you to provide your Gmail ID)</li> </ul> <ul> <li>Example</li> </ul> <p>I have added ajeetraina as my userID as shown below. Please note that we will require this userID at the later point of time during the workshop. Hence, do keep it handy.</p> <p></p> <ul> <li>That's it. Head over to your Email account to validate this account.</li> </ul> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/","title":"How to build Your First Alpine Docker Image and Push it to DockerHub","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/#pre-requisite","title":"Pre-requisite","text":"<p>Create an account with DockerHub</p> <p>Under this tutorial we will see how to build our own first alpine based Docker Image.</p> <p><code>docker run -dit alpine sh</code></p> <p></p> <ul> <li> <p>-d: This option tells Docker to run the container in detached mode, which means the container will run in the background and the command prompt will be returned immediately.</p> </li> <li> <p>-i: This option tells Docker to keep the standard input (STDIN) open, even if not attached. This allows you to interact with the container, for example by running commands inside it.</p> </li> <li> <p>-t: This option tells Docker to allocate a pseudo-TTY, which is a terminal in the container. This allows you to run interactive commands inside the container, for example by starting a shell.</p> </li> </ul> <p></p> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/#updating-apk-packages","title":"Updating APK Packages","text":"<p><code>apk update</code></p> <p></p> <p><code>apk add git</code></p> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/#now-lets-come-out-of-it-by-ctrlpq-and-commit-the-changes","title":"Now lets come out of it by Ctrl+P+Q and commit the changes","text":"<p><code>docker commit -m \"Added GIT\" 620 ajeetraina/alpine-git</code></p> <p></p> <p><code>docker images</code></p> <p></p> <p>There you see a new image just created.</p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/#time-to-tag-the-image","title":"Time to tag the image","text":"<p><code>docker tag --help</code></p> <p></p> <p><code>docker tag ajeetraina/alpine-git:latest ajeetraina/alpine-git:1.0</code></p> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/#pushing-it-to-dockerhub","title":"Pushing it to DockerHub","text":"<pre><code>$ docker login\nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker\n.com to create one.\nUsername: ajeetraina\nPassword:\nWARNING! Your password will be stored unencrypted in /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n[node4] (local) root@192.168.0.20 ~\n</code></pre> <pre><code>$ docker push ajeetraina/alpine-git:1.0\nThe push refers to repository [docker.io/ajeetraina/alpine-git]\n3846235f8c17: Pushed\nbcf2f368fe23: Mounted from library/alpine\n1.0: digest: sha256:85d50f702e930db9e5b958387e667b7e26923f4de340534085cea184adb8411e size: 740\n[node4] (local) root@192.168.0.20 ~\n</code></pre>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/","title":"Demonstrating Hello World Example","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Tested on Reading Time Docker Desktop MacOS 5 min"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> </ul>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/#running-hello-world-example","title":"Running Hello World Example","text":"<pre><code>$ docker run hello-world\n\n</code></pre>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/#explanation","title":"Explanation","text":"<p>This image is a prime example of using the scratch image effectively. See hello.c in https://github.com/docker-library/hello-world for the source code of the hello binary included in this image.</p> <p>So what\u2019s happened here? We\u2019ve called the docker run command, which is responsible for launching containers.</p> <p>The argument hello-world is the name of the image someone created on dockerhub for us. It will first search for \"hello-world\" image locally and then search in Dockerhub.</p> <p>Once the image has been downloaded, Docker turns the image into a running container and executes it.</p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/#did-you-know","title":"Did you Know?","text":"<ul> <li>The Hello World Docker Image is only 1.84 KB size.</li> </ul> <ul> <li>While running <code>docker ps</code> command, it doesn't display any running container. Reason - It gets executed once and exit immediately.</li> </ul> <ul> <li>You can use <code>docker inspect &lt;imagename&gt;</code> command to inspect about this particular Docker Image.</li> </ul>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/#contributor","title":"Contributor","text":"<p>Ajeet Singh Raina</p> <p>Next: Working with Docker Images</p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/saving-images-and-containers/","title":"Saving Images and Containers as Tar Files for Sharing","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/saving-images-and-containers/#docker-beginners-intermediate-advanced","title":"Docker - Beginners | Intermediate | Advanced","text":"<p>Imagine a scenario where you have built Docker images and containers that you would be interested to keep and share it with your other collaborators or colleagues. The below methods shall help you achieve it.</p> <p>Four basic Docker CLI comes into action:</p> <ul> <li>The <code>docker export</code> - Export a container\u2019s filesystem as a tar archive</li> <li>The <code>docker import</code> - Import the contents from a tarball to create a filesystem image</li> <li>The <code>docker save</code> - Save one or more images to a tar archive (streamed to STDOUT by default)</li> <li>The <code>docker load</code> - Load an image from a tar archive or STDIN</li> </ul>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/saving-images-and-containers/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/saving-images-and-containers/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> </ul>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/saving-images-and-containers/#create-nginx-container","title":"Create Nginx Container","text":"<p><code>docker run -d -p 80:80 nginx</code></p> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/saving-images-and-containers/#displaying-running-container","title":"Displaying Running Container","text":"<p><code>docker ps -a</code></p> <p></p> <p><code>docker export df2 &gt; nginx.tar</code></p> <p></p> <p>You could commit this container as a new image locally, but you could also use the Docker import command:</p> <p><code>docker import - mynginx &lt; nginx.tar</code></p> <p></p> <p></p> <p>If you wanted to share this image with one of your collaborators, you could upload the tar file on a web server and let your collaborator download it and use the import command on his Docker host.</p> <p>If you would rather deal with images that you have already committed, you can use the load and save commands:</p> <p><code>docker save -o mynginx1.tar nginx</code></p> <p></p> <pre><code>$ ls -l\ntotal 218756\n-rw-------    1 root     root     112844800 Dec 18 02:53 mynginx1.tar\n-rw-r--r--    1 root     root     111158784 Dec 18 02:50 nginx.tar\n</code></pre> <pre><code>$ docker rmi mynginx\nUntagged: mynginx:latest\nDeleted: sha256:aaaed50d250a671042e8dc383c6e05012e245f5eaf555d10c40be63f6028ee7b\nDeleted: sha256:41135ad184eaac0f5c4f46e4768555738303d30ab161a7431d28a5ccf1778a0f\n</code></pre> <p>Now delete all images and containers running and try to run the below command to load Docker image into your system:</p> <pre><code>$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n</code></pre> <p><code>docker load &lt; mynginx1.tar</code> </p> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/","title":"Working with Docker Images","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> </ul>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#listing-the-docker-images","title":"Listing the Docker Images","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#show-all-images-default-hides-intermediate-images","title":"Show all images (default hides intermediate images)","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#list-images-by-name-and-tag","title":"List images by name and tag","text":"<p>The docker images command takes an optional [REPOSITORY[:TAG]] argument that restricts the list to images that match the argument. If you specify REPOSITORY but no TAG, the docker images command lists all images in the given repository.</p> <p>To demo this, let us pull all various versions of alpine OS</p> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#list-the-full-length-image-ids","title":"List the full length image IDs","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#listing-out-images-with-filter","title":"Listing out images with filter","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#explanation","title":"Explanation","text":"<p>The [REPOSITORY[:TAG]] value must be an \u201cexact match\u201d.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/","title":"Lab #10: VOLUME instruction","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#assignment","title":"Assignment","text":"<ul> <li>Create an image with VOLUME instruction</li> <li>Finding the volume created on the host</li> <li>Testing mount working as exepected</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#create-an-image-with-volume-instruction","title":"Create an image with VOLUME instruction","text":"<p>Dockerfile</p> <pre><code>FROM nginx:alpine\nLABEL maintainer=\"Collabnix\"\n\nVOLUME /myvol\nCMD [ \"nginx\",\"-g\",\"daemon off;\" ]\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#building-docker-image","title":"Building Docker image","text":"<pre><code>$ docker build -t volume:v1 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#create-a-container-based-on-volumev1-image","title":"Create a container based on volume:v1 image","text":"<pre><code>$ docker container run --rm -d --name volume-test volume:v1\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#finding-the-volume-created-on-the-host","title":"Finding the volume created on the host","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#checking-the-volume-name-of-the-container","title":"Checking the volume name of the container","text":"<pre><code>$ docker container inspect -f '{{ (index .Mounts 0).Name }}' volume-test\ned09456a448934218f03acbdaa31f465ebbb92e0d45e8284527a2c538cc6b016\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#listout-volume-in-the-host","title":"Listout Volume in the host","text":"<pre><code>$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               ed09456a448934218f03acbdaa31f465ebbb92e0d45e8284527a2c538cc6b016\n</code></pre> <p>You will see the volume has been created.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#volume-mount-path-in-host","title":"Volume mount path in host","text":"<pre><code>$ docker container inspect -f '{{ (index .Mounts 0).Source }}' volume-test\n/var/lib/docker/volumes/ed09456a448934218f03acbdaa31f465ebbb92e0d45e8284527a2c538cc6b016/_data\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#testing-mount-working-as-exepected","title":"Testing mount working as exepected","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#create-a-file-in-this-folder","title":"Create a file in this folder","text":"<pre><code>$ touch /var/lib/docker/volumes/ed09456a448934218f03acbdaa31f465ebbb92e0d45e8284527a2c538cc6b016/_data/mytestfile.txt\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#checking-file-is-there-in-run-container","title":"Checking file is there in run container","text":"<pre><code>$ docker container exec -it volume-test ls myvol\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab11_volume/#contributor","title":"Contributor","text":"<p>Savio Mathew</p> <p>Next &gt;&gt; Lab #11: EXPOSE instruction</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab9_arg/","title":"Lab #8: Create an image with ARG instruction","text":"<p>The <code>ARG</code> directive in <code>Dockerfile</code> defines the parameter name and defines its default value. This default value can be overridden by the <code>--build-arg &lt;parameter name&gt;=&lt;value&gt;</code> in the build command <code>docker build</code>.</p> <pre><code>`ARG &lt;parameter name&gt;[=&lt;default&gt;]`\n</code></pre> <p>The build parameters have the same effect as <code>ENV</code>, which is to set the environment variables. The difference is that the environment variables of the build environment set by <code>ARG</code> will not exist in the future when the container is running. But don't use <code>ARG</code> to save passwords and the like, because <code>docker history</code> can still see all the values.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab9_arg/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab9_arg/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab9_arg/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab9_arg/#assignment","title":"Assignment","text":"<ul> <li>Writing a Dockerfile with ARG instruction</li> <li>Building Docker Image with default argument</li> <li>Running container argv:v1</li> <li>Passing the argument during image build time</li> <li>Running container argv:v2</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab9_arg/#writing-a-dockerfile-with-arg-instruction","title":"Writing a Dockerfile with ARG instruction","text":"<p>We are writing a Dockerfile which echo \"Welcome $WELCOME_USER, to Docker World!\" where default argument value for WELCOME_USER as Collabnix.</p> <pre><code>FROM alpine:3.9.3\nLABEL maintainer=\"Collabnix\"\n\n#Setting a default value to Argument WELCOME_USER\nARG WELCOME_USER=Collabnix\nRUN echo \"Welcome $WELCOME_USER, to Docker World!\" &gt; message.txt\nCMD cat message.txt\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab9_arg/#building-docker-image-with-default-argument","title":"Building Docker Image with default argument","text":"<pre><code>$ docker image build -t arg:v1 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab9_arg/#running-container-argvv1","title":"Running container argv:v1","text":"<pre><code>$ docker run arg:v1\n\nWelcome Collabnix, to Docker World!\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab9_arg/#passing-the-argumentwelcome_user-during-image-build-time-using-build-arg-flag","title":"Passing the argument(WELCOME_USER) during image build time using --build-arg flag","text":"<pre><code>$ docker image build -t arg:v2 --build-arg WELCOME_USER=Savio .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab9_arg/#running-container-argvv2","title":"Running container argv:v2","text":"<pre><code>$ docker run arg:v2\n\nWelcome Savio, to Docker World!\n</code></pre> <p>NOTE: ARG is the only one instruction which can come before FROM instruction, but then arg value can be used only by FROM.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/10_Lab9_arg/#contributor-","title":"Contributor -","text":"<p>Sangam Biradar Savio Mathew</p> <p>Next &gt;&gt; Lab #9: ENV instruction</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/11_Lab10_env/","title":"Lab #9: ENV instruction","text":"<p>The <code>ENV</code> instruction in Dockerfile sets the environment variable for your container when you start. The default value can be overridden by passing <code>--env &lt;key&gt;=&lt;value&gt;</code> when you start the container.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/11_Lab10_env/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/11_Lab10_env/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/11_Lab10_env/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/11_Lab10_env/#assignment","title":"Assignment","text":"<ul> <li>Writing a Dockerfile with ENV instruction</li> <li>Building Docker Image</li> <li>Running container env:v1</li> <li>Override existing env while running container</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/11_Lab10_env/#writing-a-dockerfile-with-env-instruction","title":"Writing a Dockerfile with ENV instruction","text":"<p>Dockerfile</p> <pre><code>FROM alpine:3.9.3\nLABEL maintainer=\"Collabnix\"\n\nENV WELCOME_MESSAGE=\"Welcome to Docker World\"\n\nCMD [\"sh\", \"-c\", \"echo $WELCOME_MESSAGE\"]\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/11_Lab10_env/#building-docker-image","title":"Building Docker Image","text":"<pre><code>$ docker build -t env:v1 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/11_Lab10_env/#running-container-envv1","title":"Running container env:v1","text":"<pre><code>$ docker container run env:v1\nWelcome to Docker World\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/11_Lab10_env/#override-existing-env-while-running-container","title":"Override existing env while running container","text":"<pre><code>$ docker container run --env WELCOME_MESSAGE=\"Welcome to Docker Workshop\" env:v1 \nWelcome to Docker Workshop\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/11_Lab10_env/#contributor","title":"Contributor","text":"<p>Savio Mathew</p> <p>Lab #10: VOLUME instruction</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/12_Lab11_expose_instruction/","title":"Lab #11: EXPOSE instruction","text":"<p>The <code>EXPOSE</code> instruction expose a port, the protocol can be UDP or TCP associated with the indicated port, default is TCP with no specification. The EXPOSE won't be able to map the ports on the host machine. Regardless of the EXPOSE settings, EXPOSE port can be override using -p flag while starting the container.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/12_Lab11_expose_instruction/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/12_Lab11_expose_instruction/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/12_Lab11_expose_instruction/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/12_Lab11_expose_instruction/#assignment","title":"Assignment","text":"<ul> <li>Create an image with EXPOSE instruction</li> <li>Inspecting the EXPOSE port in the image</li> <li>Publish all exposed port</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/12_Lab11_expose_instruction/#create-an-image-with-expose-instruction","title":"Create an image with EXPOSE instruction","text":"<p>Dockerfile</p> <pre><code>FROM nginx:alpine\nLABEL maintainer=\"Collabnix\"\n\nEXPOSE 80/tcp\nEXPOSE 80/udp\n\nCMD [ \"nginx\",\"-g\",\"daemon off;\" ]\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/12_Lab11_expose_instruction/#building-docker-image","title":"Building Docker image","text":"<pre><code>$ docker build -t expose:v1 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/12_Lab11_expose_instruction/#create-a-container-based-on-exposev1-image","title":"Create a container based on expose:v1 image","text":"<pre><code>$  docker container run --rm -d --name expose-inst expose:v1\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/12_Lab11_expose_instruction/#inspecting-the-expose-port-in-the-image","title":"Inspecting the EXPOSE port in the image","text":"<pre><code>$ docker image inspect --format={{.ContainerConfig.ExposedPorts}} expose:v1\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/12_Lab11_expose_instruction/#publish-all-exposed-ports","title":"Publish all exposed ports","text":"<p>We can publish all EXPOSE port using -P flag. </p> <pre><code>$ docker container run --rm -P -d --name expose-inst-Publish expose:v1\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/12_Lab11_expose_instruction/#checking-the-publish-port","title":"Checking the publish port","text":"<pre><code>$  docker container ls\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                          NAMES\n24983e09bd86        expose:v1           \"nginx -g 'daemon of\u2026\"   46 seconds ago      Up 45 seconds       0.0.0.0:32768-&gt;80/tcp, 0.0.0.0:32768-&gt;80/udp   expose-inst-Publish\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/12_Lab11_expose_instruction/#contributor","title":"Contributor","text":"<p>Savio Mathew</p> <p>Next &gt;&gt; Lab #12: LABEL instruction</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/13_Lab12_label/","title":"LABEL Instruction","text":"<p>You can add labels to your image to help organize images by project, record licensing information, to aid in automation, or for other reasons. For each label, add a line beginning with LABEL and with one or more key-value pairs. The following examples show the different acceptable formats. Docker offers support to add labels into images as a way to add custom metadata on them. The label syntax on your Dockerfile is as follows: </p> <pre><code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...\n</code></pre> <p>The LABEL instruction adds metadata to an image. A LABEL is a key-value pair. To include spaces within a LABEL value, use quotes and backslashes as you would in command-line parsing. A few usage examples:</p> <pre><code>LABEL \"com.example.vendor\"=\"ACME Incorporated\"\nLABEL com.example.label-with-value=\"foo\"\nLABEL version=\"1.0\"\nLABEL description=\"This text illustrates \\\nthat label-values can span multiple lines.\"\n</code></pre> <p>An image can have more than one label. You can specify multiple labels on a single line. Prior to Docker 1.10, this decreased the size of the final image, but this is no longer the case. You may still choose to specify multiple labels in a single instruction, in one of the following two ways:</p> <pre><code>LABEL multi.label1=\"value1\" multi.label2=\"value2\" other=\"value3\"\n</code></pre> <pre><code>LABEL multi.label1=\"value1\" \\\n      multi.label2=\"value2\" \\\n      other=\"value3\"\n</code></pre> <p>Labels included in base or parent images (images in the FROM line) are inherited by your image. If a label already exists but with a different value, the most-recently-applied value overrides any previously-set value.</p> <p>To view an image\u2019s labels, use the <code>docker inspect</code> command.</p> <pre><code>\"Labels\": {\n    \"com.example.vendor\": \"ACME Incorporated\"\n    \"com.example.label-with-value\": \"foo\",\n    \"version\": \"1.0\",\n    \"description\": \"This text illustrates that label-values can span multiple lines.\",\n    \"multi.label1\": \"value1\",\n    \"multi.label2\": \"value2\",\n    \"other\": \"value3\"\n},\n</code></pre> <p>Next &gt;&gt; Lab #13: ONBUILD instruction </p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/14_Lab13_onbuild/","title":"Onbuild Instruction","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/14_Lab13_onbuild/#onbuild-making-wedding-clothes-for-others","title":"ONBUILD Making wedding clothes for others","text":"<p>Format: <code>ONBUILD &lt;other instructions&gt;</code>.</p> <p><code>ONBUILD</code> is a special instruction, followed by other instructions, such as <code>RUN</code>, <code>COPY</code>, etc., and these instructions will not be executed when the current image is built. Only when the current image is mirrored, the next level of mirroring will be executed.</p> <p>The other instructions in <code>Dockerfile</code> are prepared to customize the current image. Only <code>ONBUILD</code> is prepared to help others customize themselves.</p> <p>Suppose we want to make an image of the application written by Node.js. We all know that Node.js uses <code>npm</code> for package management, and all dependencies, configuration, startup information, etc. are placed in the <code>package.json</code> file. After getting the program code, you need to do <code>npm install</code> first to get all the required dependencies. Then you can start the app with <code>npm start</code>. Therefore, in general, <code>Dockerfile</code> will be written like this:</p> <pre><code>FROM node:slim\nRUN mkdir /app\nWORKDIR /app\nCOPY ./package.json /app\nRUN [ \"npm\", \"install\" ]\nCOPY . /app/\nCMD [ \"npm\", \"start\" ]\n</code></pre> <p>Put this <code>Dockerfile</code> in the root directory of the Node.js project, and after building the image, you can use it to start the container. But what if we have a second Node.js project? Ok, then copy this <code>Dockerfile</code> to the second project. If there is a third project? Copy it again? The more copies of a file, the more difficult it is to have version control, so let's continue to look at the maintenance of such scenarios.</p> <p>If the first Node.js project is in development, I find that there is a problem in this <code>Dockerfile</code>, such as typing a typo, or installing an extra package, then the developer fixes the <code>Dockerfile</code>, builds it again, and solves the problem. The first project is ok, but the second one? Although the original <code>Dockerfile</code> was copied and pasted from the first project, it will not fix their <code>Dockerfile</code> because the first project, and the <code>Dockerfile</code> of the second project will be automatically fixed.</p> <p>So can we make a base image, and then use the base image for each project? In this way, the basic image is updated, and each project does not need to synchronize the changes of <code>Dockerfile</code>. After rebuilding, it inherits the update of the base image. Ok, yes, let's see the result. Then the above <code>Dockerfile</code> will become:</p> <pre><code>FROM node:slim\nRUN mkdir /app\nWORKDIR /app\nCMD [ \"npm\", \"start\" ]\n</code></pre> <p>Here we take out the project-related build instructions and put them in the subproject. Assuming that the name of the base image is <code>my-node</code>, the own <code>Dockerfile</code> in each project becomes:</p> <pre><code>FROM my-node\n</code></pre> <p>Yes, there is only one such line. When constructing a mirror with this one-line <code>Dockerfile</code> in each project directory, the three lines of the previous base image <code>ONBUILD</code> will start executing, successfully copy the current project code into the image, and execute for this project. <code>npm install</code>, generate an application image.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/14_Lab13_onbuild/#lab","title":"Lab","text":"<pre><code># Dockerfile\nFROM busybox\nONBUILD RUN echo \"You won't see me until later\"\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/14_Lab13_onbuild/#docker-build","title":"Docker build","text":"<pre><code>docker build -t me/no_echo_here .\n\nUploading context  2.56 kB\nUploading context\nStep 0 : FROM busybox\nPulling repository busybox\n769b9341d937: Download complete\n511136ea3c5a: Download complete\nbf747efa0e2f: Download complete\n48e5f45168b9: Download complete\n ---&amp;gt; 769b9341d937\nStep 1 : ONBUILD RUN echo \"You won't see me until later\"\n ---&amp;gt; Running in 6bf1e8f65f00\n ---&amp;gt; f864c417cc99\nSuccessfully built f864c417cc9\n</code></pre> <p>Here the ONBUILD instruction is read, not run, but stored for later use.</p> <pre><code># Dockerfile\nFROM me/no_echo_here\n</code></pre> <p>docker build -t me/echo_here . Uploading context  2.56 kB Uploading context Step 0 : FROM cpuguy83/no_echo_here</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/14_Lab13_onbuild/#executing-1-build-triggers","title":"Executing 1 build triggers","text":"<pre><code>Step onbuild-0 : RUN echo \"You won't see me until later\"\n ---&amp;gt; Running in ebfede7e39c8\nYou won't see me until later\n ---&amp;gt; ca6f025712d4\n ---&amp;gt; ca6f025712d4\nSuccessfully built ca6f025712d4\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/14_Lab13_onbuild/#ubutu-rails","title":"Ubutu Rails","text":"<pre><code>FROM ubuntu:12.04\n\nRUN apt-get update -qq &amp;&amp; apt-get install -y ca-certificates sudo curl git-core\nRUN rm /bin/sh &amp;&amp; ln -s /bin/bash /bin/sh\n\nRUN locale-gen  en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\nENV LC_ALL en_US.UTF-8\n\nRUN curl -L https://get.rvm.io | bash -s stable\nENV PATH /usr/local/rvm/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nRUN /bin/bash -l -c rvm requirements\nRUN source /usr/local/rvm/scripts/rvm &amp;&amp; rvm install ruby\nRUN rvm all do gem install bundler\n\nONBUILD ADD . /opt/rails_demo\nONBUILD WORKDIR /opt/rails_demo\nONBUILD RUN rvm all do bundle install\nONBUILD CMD rvm all do bundle exec rails server\n\n</code></pre> <p>This Dockerfile is doing some initial setup of a base image. Installs Ruby and bundler. Pretty typical stuff. At the end are the ONBUILD instructions.</p> <p>ONBUILD ADD . /opt/rails_demo Tells any child image to add everything in the current directory to /opt/railsdemo. Remember, this only gets run from a child image, that is when another image uses this one as a base (or FROM). And it just so happens if you look in the repo I have a skeleton rails app in railsdemo that has it's own Dockerfile in it, we'll take a look at this later.</p> <p>ONBUILD WORKDIR /opt/rails_demo Tells any child image to set the working directory to /opt/rails_demo, which is where we told ADD to put any project files</p> <p>ONBUILD RUN rvm all do bundle install Tells any child image to have bundler install all gem dependencies, because we are assuming a Rails app here.</p> <p>ONBUILD CMD rvm all do bundle exec rails server Tells any child image to set the CMD to start the rails server</p> <p>Ok, so let's see this image build, go ahead and do this for yourself so you can see the output.</p> <pre><code>git clone git@github.com:sangam14/docker_onbuild.git \ncd docker_onbuild\ndocker build -t sangam14/docker_onbuild .\n\nStep 0 : FROM ubuntu:12.04\n ---&amp;gt; 9cd978db300e\nStep 1 : RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y ca-certificates sudo curl git-core\n ---&amp;gt; Running in b32a089b7d2d\n# output supressed\nldconfig deferred processing now taking place\n ---&amp;gt; d3fdefaed447\nStep 2 : RUN rm /bin/sh &amp;amp;&amp;amp; ln -s /bin/bash /bin/sh\n ---&amp;gt; Running in f218cafc54d7\n ---&amp;gt; 21a59f8613e1\nStep 3 : RUN locale-gen  en_US.UTF-8\n ---&amp;gt; Running in 0fcd7672ddd5\nGenerating locales...\ndone\nGeneration complete.\n ---&amp;gt; aa1074531047\nStep 4 : ENV LANG en_US.UTF-8\n ---&amp;gt; Running in dcf936d57f38\n ---&amp;gt; b9326a787f78\nStep 5 : ENV LANGUAGE en_US.UTF-8\n ---&amp;gt; Running in 2133c36335f5\n ---&amp;gt; 3382c53f7f40\nStep 6 : ENV LC_ALL en_US.UTF-8\n ---&amp;gt; Running in 83f353aba4c8\n ---&amp;gt; f849fc6bd0cd\nStep 7 : RUN curl -L https://get.rvm.io | bash -s stable\n ---&amp;gt; Running in b53cc257d59c\n# output supressed\n---&amp;gt; 482a9f7ac656\nStep 8 : ENV PATH /usr/local/rvm/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n ---&amp;gt; Running in c4666b639c70\n ---&amp;gt; b5d5c3e25730\nStep 9 : RUN /bin/bash -l -c rvm requirements\n ---&amp;gt; Running in 91469dbc25a6\n# output supressed\nStep 10 : RUN source /usr/local/rvm/scripts/rvm &amp;amp;&amp;amp; rvm install ruby\n ---&amp;gt; Running in cb4cdfcda68f\n# output supressed\nStep 11 : RUN rvm all do gem install bundler\n ---&amp;gt; Running in 9571104b3b65\nSuccessfully installed bundler-1.5.3\nParsing documentation for bundler-1.5.3\nInstalling ri documentation for bundler-1.5.3\nDone installing documentation for bundler after 3 seconds\n1 gem installed\n ---&amp;gt; e2ea33486d62\nStep 12 : ONBUILD ADD . /opt/rails_demo\n ---&amp;gt; Running in 5bef85f266a4\n ---&amp;gt; 4082e2a71c7e\nStep 13 : ONBUILD WORKDIR /opt/rails_demo\n ---&amp;gt; Running in be1a06c7f9ab\n ---&amp;gt; 23bec71dce21\nStep 14 : ONBUILD RUN rvm all do bundle install\n ---&amp;gt; Running in 991da8dc7f61\n ---&amp;gt; 1547bef18de8\nStep 15 : ONBUILD CMD rvm all do bundle exec rails server\n ---&amp;gt; Running in c49139e13a0c\n ---&amp;gt; 23c388fb84c1\nSuccessfully built 23c388fb84c1\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/14_Lab13_onbuild/#contributor-sangam-biradar","title":"Contributor - Sangam Biradar","text":"<p>Next &gt;&gt; healthcheck</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/","title":"Lab #14: Create a Docker Image with HEALTHCHECK instruction","text":"<p>The HEALTHCHECK directive tells Docker how to determine if the state of the container is normal. This was a new directive introduced during Docker 1.12. Before the HEALTHCHECK directive, the Docker engine can only determine if the container is in a state of abnormality by whether the main process in the container exits. In many cases, this is fine, but if the program enters a deadlock state, or an infinite loop state, the application process does not exit, but the container is no longer able to provide services. Prior to 1.12, Docker did not detect this state of the container and would not reschedule it, causing some containers to be unable to serve, but still accepting user requests.</p> <p>The syntax look like:</p> <p><code>HEALTHCHECK [options] CMD &lt;command&gt;</code>: </p> <p>The above syntax set the command to check the health of the container</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#how-does-it-work","title":"How does it work?","text":"<p>When a HEALTHCHECK instruction is specified in an image, the container is started with it, the initial state will be starting, and will become healthy after the HEALTHCHECK instruction is checked successfully. If it fails for a certain number of times, it will become unhealthy.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#what-options-does-healthcheck-support","title":"What options does  HEALTHCHECK support?","text":"<p><code>--interval=&lt;interval&gt;</code>: interval between two health checks, the default is 30 seconds; <code>--timeout=&lt;time length&gt;</code>: The health check command runs the timeout period. If this time is exceeded, the health check is regarded as a failure. The default is 30 seconds. <code>--retries=&lt;number&gt;</code>: When the specified number of consecutive failures, the container status is treated as unhealthy, the default is 3 times. Like CMD, ENTRYPOINT, HEALTHCHECK can only appear once. If more than one is written, only the last one will take effect.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#assignment","title":"Assignment:","text":"<ul> <li>Writing a Dockerfile with HEALTHCHECK instruction</li> <li>Build a Docker Image</li> <li>Check that the nginx config file exists</li> <li>Check if nginx is healthy</li> <li>Make Docker container Unhealthy and check</li> <li>Create the nginx.conf file and Making the container go healthy</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#writing-a-dockerfile-with-healthcheck-instruction","title":"Writing a Dockerfile with HEALTHCHECK instruction","text":"<p>Suppose we have a simple Web service. We want to add a health check to determine if its Web service is working. We can use curl to help determine the HEALTHCHECK of its Dockerfile:</p> <pre><code>FROM nginx:1.13\nHEALTHCHECK --interval=30s --timeout=3s \\\n  CMD curl -f http://localhost/ || exit 1\nEXPOSE 80\n</code></pre> <p>Here we set a check every 3 seconds (here the interval is very short for the test, it should be relatively long), if the health check command does not respond for more than 3 seconds, it is considered a failure, and use curl -fs http://localhost/ || exit 1 As a health check command.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#building-docker-image","title":"Building Docker Image","text":"<pre><code>docker image build -t nginx:1.13 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#check-that-the-nginx-config-file-exists","title":"Check that the nginx config file exists","text":"<pre><code>docker run --name=nginx-proxy -d \\\n        --health-cmd='stat /etc/nginx/nginx.conf || exit 1' \\\n        nginx:1.13\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#check-if-nginx-is-healthy","title":"Check if nginx is healthy","text":"<pre><code>docker inspect --format='{{.State.Health.Status}}' nginx-proxy\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#make-docker-container-unhealthy-and-check","title":"Make Docker container Unhealthy and check","text":"<pre><code>docker exec nginx-proxy rm /etc/nginx/nginx.conf\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#check-if-nginx-is-healthy_1","title":"Check if nginx is healthy","text":"<pre><code>sleep 5; docker inspect --format='{{.State.Health.Status}}' nginx-proxy\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#creating-the-nginxconf-file-and-making-the-container-go-healthy","title":"Creating the nginx.conf file and Making the container go healthy","text":"<pre><code>docker exec nginx-proxy touch /etc/nginx/nginx.conf\n</code></pre> <pre><code>sleep 5; docker inspect --format='{{.State.Health.Status}}' nginx-proxy\nhealthy\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/15_Lab14_healthcheck/#contributors","title":"Contributors","text":"<p>Sangam Biradar Balasundaram</p> <p>Next &gt;&gt; Lab #15: SHELL instruction</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/16_Lab15-Create-an-image-with-SHELL-instruction/","title":"Lab #14: Create an image with SHELL instruction","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/16_Lab15-Create-an-image-with-SHELL-instruction/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/16_Lab15-Create-an-image-with-SHELL-instruction/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/16_Lab15-Create-an-image-with-SHELL-instruction/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul> <p>1- Install Docker latest version. 2- Shell instruction syntax </p> <pre><code>SHELL [\"executable\", \"parameters\"]\n</code></pre> <ul> <li> <p>The SHELL instruction allows the default shell used for the shell form of commands to be overridden. The default shell on Linux is <code>[\"/bin/sh\", \"-c\"]</code>, and on Windows is <code>[\"cmd\", \"/S\", \"/C\"]</code>. The SHELL instruction must be written in JSON form in a Dockerfile.</p> </li> <li> <p>The SHELL instruction is particularly useful on Windows where there are two commonly used and quite different native shells: cmd and powershell, as well as alternate shells available including sh.</p> </li> <li> <p>The SHELL instruction can appear multiple times. Each SHELL instruction overrides all previous SHELL instructions, and affects all subsequent instructions. </p> </li> </ul> <p>3- Create the Dockerfile with instruction. </p> <pre><code>FROM windowsservercore\n\n# Executed as cmd /S /C echo default\nRUN echo default\n\n# Executed as cmd /S /C powershell -command Write-Host default\nRUN powershell -command Write-Host default\n\n# Executed as powershell -command Write-Host hello\nSHELL [\"powershell\", \"-command\"]\nRUN Write-Host hello\n\n# Executed as cmd /S /C echo hello\nSHELL [\"cmd\", \"/S\"\", \"/C\"]\nRUN echo hello\n</code></pre> <ul> <li>The following instructions can be affected by the <code>SHELL</code> instruction when the shell form of them is used in a Dockerfile:  RUN, CMD and ENTRYPOINT.</li> </ul> <p>The following example is a common pattern found on Windows which can be streamlined by using the SHELL instruction:</p> <pre><code>\nRUN powershell -command Execute-MyCmdlet -param1 \"c:\\foo.txt\"\n\n</code></pre> <p>The command invoked by docker will be:</p> <pre><code>\ncmd /S /C powershell -command Execute-MyCmdlet -param1 \"c:\\foo.txt\"\n\n</code></pre> <ul> <li> <p>This is inefficient for two reasons. First, there is an un-necessary cmd.exe command processor (aka shell) being invoked. Second, each RUN instruction in the shell form requires an extra powershell <code>-command</code> prefixing the command.</p> </li> <li> <p>To make this more efficient, one of two mechanisms can be employed. One is to use the JSON form of the RUN command such as:</p> </li> </ul> <pre><code>\nRUN [\"powershell\", \"-command\", \"Execute-MyCmdlet\", \"-param1 \\\"c:\\\\foo.txt\\\"\"]\n\n</code></pre> <p>While the JSON form is unambiguous and does not use the un-necessary cmd.exe, it does require more verbosity  through double-quoting and escaping. The alternate mechanism is to use the SHELL instruction and the shell form,  making a more natural syntax for Windows users, especially when combined with the escape parser directive:</p> <pre><code># escape=`\n\nFROM windowsservercore\nSHELL [\"powershell\",\"-command\"]\nRUN New-Item -ItemType Directory C:\\Example\nADD Execute-MyCmdlet.ps1 c:\\example\\\nRUN c:\\example\\Execute-MyCmdlet -sample 'hello world'\n\n</code></pre> <ol> <li>output </li> </ol> <pre><code>PS E:\\docker\\build\\shell&gt; docker build -t shell .\nSending build context to Docker daemon 3.584 kB\nStep 1 : FROM windowsservercore\n ---&gt; 5bc36a335344\nStep 2 : SHELL powershell -command\n ---&gt; Running in 87d7a64c9751\n ---&gt; 4327358436c1\nRemoving intermediate container 87d7a64c9751\nStep 3 : RUN New-Item -ItemType Directory C:\\Example\n ---&gt; Running in 3e6ba16b8df9\n\n\nDirectory: C:\\\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----         6/2/2016   2:59 PM                Example\n\n\n ---&gt; 1f1dfdcec085\nRemoving intermediate container 3e6ba16b8df9\nStep 4 : ADD Execute-MyCmdlet.ps1 c:\\example\\\n ---&gt; 6770b4c17f29\nRemoving intermediate container b139e34291dc\nStep 5 : RUN c:\\example\\Execute-MyCmdlet -sample 'hello world'\n ---&gt; Running in abdcf50dfd1f\nHello from Execute-MyCmdlet.ps1 - passed hello world\n ---&gt; ba0e25255fda\nRemoving intermediate container abdcf50dfd1f\nSuccessfully built ba0e25255fda\nPS E:\\docker\\build\\shell&gt;\n\n\n</code></pre> <ul> <li>The SHELL instruction could also be used to modify the way in which a shell operates. For example, using <code>SHELL cmd /S /C /V:ON|OFF</code> on Windows, delayed environment variable expansion semantics could be modified.</li> <li>The <code>SHELL</code> instruction can also be used on Linux should an alternate shell be required such zsh, csh, tcsh and others.</li> <li>The <code>SHELL</code> feature was added in Docker 1.12.</li> </ul> <p>Next &gt;&gt; Lab #16: Entrypoint Vs RUN</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/17_Lab16-Entrypoint-instruction/","title":"How is ENTRYPOINT instruction under Dockerfile different from RUN instruction?","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/17_Lab16-Entrypoint-instruction/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/17_Lab16-Entrypoint-instruction/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/17_Lab16-Entrypoint-instruction/#what-is-entrypoint-meant-for","title":"What is ENTRYPOINT meant for?","text":"<p>ENTRYPOINT is meant to provide the executable while CMD is to pass the default arguments to the executable. To understand it clearly, let us consider the below Dockerfile:</p> <p></p> <p>If you try building this Docker image using <code>docker build command</code> -</p> <p></p> <p>Let us run this image without any argument.</p> <p></p> <p>Let's run it passing a command line argument</p> <p></p> <p>This clearly state that ENTRYPOINT is meant to provide the executable while CMD is to pass the default arguments to the executable.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/17_Lab16-Entrypoint-instruction/#contributor","title":"Contributor","text":"<ul> <li>Ajeet Singh Raina</li> </ul> <p>Next &gt;&gt; Lab #17: USER instruction</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/18_Lab17-user/","title":"Lab 17: USER Instruction under Dockerfile","text":"<p>The <code>USER</code> directive is similar to <code>WORKDIR</code>, which changes the state of the environment and affects future layers. <code>WORKDIR</code> is to change the working directory, and <code>USER</code> is the identity of the commands such as <code>RUN</code>, <code>CMD</code> and <code>ENTRYPOINT</code>.</p> <p>Of course, like <code>WORKDIR</code>, <code>USER</code> just helps you switch to the specified user. This user must be pre-established, otherwise it cannot be switched.</p> <p>Example:</p> <pre><code>RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis\nUSER redis\nRUN [ \"redis-server\" ]\n</code></pre> <p>If the script executed with <code>root</code> wants to change the identity during execution, such as wanting to run a service process with an already established user, don't use <code>su</code> or <code>sudo</code>, which requires a more cumbersome configuration. And often in the absence of TTY environment. It is recommended to use [<code>gosu</code>] (https://github.com/tianon/gosu).</p> <pre><code># Create a redis user and use gosu to change another user to execute the command\nRUN groupadd -r redis &amp;&amp; useradd -r -g redis redis\n# download gosu\nRUN wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64\" \\\n\u00a0\u00a0\u00a0\u00a0&amp;&amp; chmod +x /usr/local/bin/gosu \\\n\u00a0\u00a0\u00a0\u00a0&amp;&amp; gosu nobody true\n# Set CMD and execute it as another user\nCMD [ \"exec\", \"gosu\", \"redis\", \"redis-server\" ]\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/18_Lab17-user/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/18_Lab17-user/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/18_Lab17-user/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/18_Lab17-user/#contributor-sangam-biradar","title":"Contributor - Sangam Biradar","text":"<p>Next &gt;&gt;Writing Dockerfile with Hello Python Script Added</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/19_lab18_dockerfile_python/","title":"Writing Dockerfile with Hello Python Script Added","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/19_lab18_dockerfile_python/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/19_lab18_dockerfile_python/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/19_lab18_dockerfile_python/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul> <pre><code>[node1] (local) root@192.168.0.38 ~\n$ mkdir /test\n</code></pre> <pre><code>[node1] (local) root@192.168.0.38 ~\n$ cd /test\n</code></pre> <pre><code>[node1] (local) root@192.168.0.38 /test\n$ pwd\n/test\n</code></pre> <p>Open a file named 'Dockerfile' with a text editor.</p> <pre><code>[node1] (local) root@192.168.0.38 /test\n$ vi Dockerfile\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/19_lab18_dockerfile_python/#writing-a-dockerfile","title":"Writing a Dockerfile","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/19_lab18_dockerfile_python/#setting-a-base-image-using-from-keyword","title":"Setting a Base Image using FROM keyword","text":"<pre><code>FROM ubuntu\n</code></pre> <p>Thus, our image would start building taking base as Ubuntu.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/19_lab18_dockerfile_python/#defining-the-author-optional-using-maintainer-keyword","title":"Defining the Author (Optional) using MAINTAINER keyword","text":"<pre><code>MAINTAINER Prashansa Kulshrestha\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/19_lab18_dockerfile_python/#running-a-commands-on-the-base-image-to-form-new-layers-using-run-keyword","title":"Running a commands on the base image to form new layers using RUN keyword","text":"<pre><code>RUN apt-get update\nRUN apt-get install python\n</code></pre> <p>Since, the base image was Ubuntu, we can run Ubuntu commands here. These commands above install python over Ubuntu.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/19_lab18_dockerfile_python/#adding-a-simple-hello-world-printing-python-file-to-the-containers-file-system-using-add-command","title":"Adding a simple Hello World printing python file to the container's file system using ADD command","text":"<pre><code>ADD hello.py /home/hello.py\nADD a.py /home/a.py\n</code></pre> <p>We will place our hello.py and a.py files in the newly created directory itself (/test). ADD command would copy it from /test (current working directory) of host system to container's filesystem at /home. The destination directories in the container would be create incase they don't exist.</p> <p>Code for hello.py:</p> <pre><code>print (\"Hello World\")\n</code></pre> <p>Code for a.py:</p> <pre><code>print (\"Overriden Hello\")\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/19_lab18_dockerfile_python/#specifying-default-execution-environment-for-the-container-using-cmd-and-entrypoint","title":"Specifying default execution environment for the container using CMD and ENTRYPOINT","text":"<p>These keywords let us define the default execution environment for a container when it just initiates from an image or just starts. If a command is specified with CMD keyword, it is the first command which a container executes as soon as it instantiates from an image. However, command and arguments provided with CMD can be overridden if user specifies his own commands while running the container using 'docker run' command.'</p> <p>ENTRYPOINT helps to create a executable container and the commands and arguments provided with this keyword are not overridden.</p> <p>We can also provide the default application environment using ENTRYPOINT and default arguments to be passed to it via CMD keyword. This can be done as follows:</p> <pre><code>CMD [\"/home/hello.py\"]\nENTRYPOINT [\"python\"]\n</code></pre> <p>So, default application mode of container would be python and if no other filename is provided as argument to it then it will execute hello.py placed in its /home directory.</p> <p>Benefit of this is that user can choose some other file to run with the same application at runtime, that is, while launching the container.</p> <p>So, our overall Dockerfile currently looks like this:</p> <pre><code>FROM ubuntu\nMAINTAINER Prashansa Kulshrestha\nRUN apt-get update\nRUN apt-get install -y python\nADD hello.py /home/hello.py\nADD a.py /home/a.py\nCMD [\"/home/hello.py\"]\nENTRYPOINT [\"python\"]\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/19_lab18_dockerfile_python/#building-a-dockerfile","title":"Building a Dockerfile","text":"<p>To create an image from the Dockerfile, we need to build it. This is done as follows:</p> <pre><code>[node1] (local) root@192.168.0.38 /test\n$ docker build -t pythonimage .\n</code></pre> <p>The option -t lets us tag our image with a name we desire. So, here we have named our image as 'pythonimage'. The '.' in the end specifies current working directory i.e. /test. We initiated our build process from here. Docker would find the file named 'Dockerfile' in the current directory to process the build.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/19_lab18_dockerfile_python/#running-a-container-from-the-newly-built-image","title":"Running a container from the newly built image","text":"<pre><code>[node1] (local) root@192.168.0.38 /test\n$ docker run --name test1 pythonimage\nHello World\n[node1] (local) root@192.168.0.38 /test\n$\n</code></pre> <p>So, here /home/hello.py file placed in the container executed and displayed the output 'Hello World', since it was specified as default with CMD keyword.</p> <pre><code>[node1] (local) root@192.168.0.38 /test\n$ docker run --name test2 pythonimage /home/a.py\nOverriden Hello \n[node1] (local) root@192.168.0.38 /test\n$\n</code></pre> <p>Here, user specified another file to be run with python (default application for this container). So, the file specified with CMD got overridden and we obtained the output from /home/a.py.</p> <p>Next &gt;&gt;Building a Private Docker Registry</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/1_Writing-dockerfile/","title":"Writing a dockerfile","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/1_Writing-dockerfile/#what-is-a-dockerfile","title":"What is a Dockerfile?","text":"<ul> <li>A Dockerfile is a text file which contains a series of commands or instructions. </li> <li>These instructions are executed in the order in which they are written.</li> <li>Execution of these instructions takes place on a base image. </li> <li>On building the Dockerfile, the successive actions form a new image from the base parent image.</li> </ul> <p>We will go through each of instructions under Dockerfile and see how it is used.</p> <ul> <li>Lab #1: Installing GIT</li> <li>Lab #2: ADD instruction</li> <li>Lab #3: COPY instruction</li> <li>Lab #4: CMD instruction</li> <li>Lab #5: ENTRYPOINT instruction</li> <li>Lab #6: WORKDIR instruction</li> <li>Lab #7: RUN instruction</li> <li>Lab #8: ARG instruction</li> <li>Lab #9: EXPOSE instruction</li> <li>Lab #10: VOLUME instruction</li> <li>Lab #11: EXPOSE instruction</li> <li>Lab #12: LABEL instruction</li> <li>Lab #13: ONBUILD instruction</li> <li>Lab #14: HEALTHCHECK instruction</li> <li>Lab #15: SHELL instruction</li> <li>Lab #16: Entrypoint Vs RUN</li> <li>Lab #17: USER instruction</li> <li>Writing Dockerfile with Hello Python Script Added</li> </ul> <p>Let's proceed:</p> <p>Lab #1: Create an image with GIT installed</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/2_Layering-Dockerfile/","title":"Understanding Image Layering Concept with Dockerfile","text":"<p>Docker container is a runnable instance of an image, which is actually made by writing a readable/writable layer on top of some read-only layers. </p> <p>The parent image used to create another image from a Dockerfile is read-only. When we execute instructions on this parent image, new layers keep adding up. These layers are created when we run docker build command. </p> <p>The instructions RUN, COPY, ADD mostly contribute to the addition of layers in a Docker build. </p> <p>Each layer is read-only except the last one - this is added to the image for generating a runnable container. This last layer is called \"container layer\". All changes made to the container, like making new files, installing applications, etc. are done in this thin layer.</p> <p>Let's understand this layering using an example:</p> <p>Consider the Dockerfile given below:</p> <pre><code>FROM ubuntu:latest\nRUN mkdir -p /hello/hello\nCOPY hello.txt /hello/hello\nRUN chmod 600 /hello/hello/hello.txt\n\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/2_Layering-Dockerfile/#layer-id","title":"Layer ID","text":"<p>Each instruction the Dockerfile generates a layer. Each of this layer has a randomly generated unique ID. This ID can be seen at the time of build. See the image below:</p> <p></p> <p>To view all these layers once an image is built from a Dockerfile, we can use docker history command.</p> <p></p> <p>To see more information about the Docker image and the layers use <code>docker inspect</code> command as such:</p> <pre><code># docker inspect testimage:latest\n\n[\n    {\n        \"Id\": \"sha256:c5701e02ed095ae7cabaef9fcef009d1f272206ff707deca13a680e024db7f02\",\n        \"RepoTags\": [\n            \"testimage:latest\"\n        ],\n        \"RepoDigests\": [],\n        \"Parent\": \"sha256:694569c6db07ecef432cee1a9a4a6d45f2fd1f6be16814bf59e101bed966e612\",\n        \"Comment\": \"\",\n        \"Created\": \"2019-06-03T23:47:01.026463541Z\",\n        \"Container\": \"ac8873a003cb9ed972b4675f8d27181b99112e7530a5803ff89780e3ecc18b1c\",\n        \"ContainerConfig\": {\n            \"Hostname\": \"\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": [\n                \"/bin/sh\",\n                \"-c\",\n                \"chmod 600 /home/hello/hello.txt\"\n            ],\n            \"ArgsEscaped\": true,\n            \"Image\": \"sha256:694569c6db07ecef432cee1a9a4a6d45f2fd1f6be16814bf59e101bed966e612\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"\",\n            \"Entrypoint\": null,\n            \"OnBuild\": null,\n            \"Labels\": null\n        },\n        \"DockerVersion\": \"18.03.1-ce\",\n        \"Author\": \"\",\n        \"Config\": {\n            \"Hostname\": \"\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": [\n                \"/bin/bash\"\n            ],\n            \"ArgsEscaped\": true,\n            \"Image\": \"sha256:694569c6db07ecef432cee1a9a4a6d45f2fd1f6be16814bf59e101bed966e612\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"\",\n            \"Entrypoint\": null,\n            \"OnBuild\": null,\n            \"Labels\": null\n        },\n        \"Architecture\": \"amd64\",\n        \"Os\": \"linux\",\n        \"Size\": 222876395,\n        \"VirtualSize\": 222876395,\n        \"GraphDriver\": {\n            \"Data\": {\n                \"LowerDir\": \"/var/lib/docker/overlay2/86a76eac21ae67f6d78e59076107a121e6dfb9cc922e68e1be975fc97e711eb1/diff:/var/lib/docker/overlay2/0604b502d31eff670769257ba3411fca09fbe2eab03343660ba557024915a1e6/diff:/var/lib/docker/overlay2/16af32e079fbc252ea5de044628285d5c3a34fc8441602a762729482666b2431/diff:/var/lib/docker/overlay2/732c4ab0164f92664ce831b4a830251132bf17cbcb7d093334a7a367b1a665e5/diff:/var/lib/docker/overlay2/c8a69709e5093c6eefa317f015cbf1422a446b2fe5d3f3d52a7e0d8af8dc6a28/diff:/var/lib/docker/overlay2/c93b36ec3a753592518727a2ea4547ab4e53d58489b9fae0838b2806e9c18346/diff:/var/lib/docker/overlay2/e67589599c2a5ed3bd74a269f3effaa52f94975fd811a866f1fe2bbcb2edabe4/diff\",\n                \"MergedDir\": \"/var/lib/docker/overlay2/31c68adcd824f155d23de4197b3d0b8776b079c307c1e4c0f2f8bbc73807adc0/merged\",\n                \"UpperDir\": \"/var/lib/docker/overlay2/31c68adcd824f155d23de4197b3d0b8776b079c307c1e4c0f2f8bbc73807adc0/diff\",\n                \"WorkDir\": \"/var/lib/docker/overlay2/31c68adcd824f155d23de4197b3d0b8776b079c307c1e4c0f2f8bbc73807adc0/work\"\n            },\n            \"Name\": \"overlay2\"\n        },\n        \"RootFS\": {\n            \"Type\": \"layers\",\n            \"Layers\": [\n                \"sha256:05b0f7f2a81723fd647744a7340477ef9619f5ddeba3f2ca039dac3dd143cd59\",\n                \"sha256:0c3819952093832ffd8865bf72bc17f2f5475795cffe97e2b4c4ff36e638c244\",\n                \"sha256:14fa4a9494bf9e61f83a1bb96cd9e963ab0cbbdaf8ed91ff5eec5196c5bf7b12\",\n                \"sha256:b33859b66bfd3ad176ccf3be8dbd52d6b9823de8cc26688f2efeb76a0ea24a78\",\n                \"sha256:4622c8e1bdc0716e185fa3b338fa415dfdad3724336315de0bebd173a6ceaf05\",\n                \"sha256:6427efc3a0d7bae1fe315b844703580b2095073dcdf54a6ed9c7b1c0d982d9b0\",\n                \"sha256:59cd898074ac7765bacd76a11724b8d666ed8e9c14e7806dfb20a486102f6f1e\",\n                \"sha256:ad24f18512fddb8794612f7ec5955d06dcee93641d02932d809f0640263b8e79\"\n            ]\n        },\n        \"Metadata\": {\n            \"LastTagTime\": \"2019-06-04T05:17:01.430558997+05:30\"\n        }\n    }\n]\n\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/2_Layering-Dockerfile/#do-you-want-to-visualize-layers-of-docker-image","title":"Do you want to visualize layers of Docker Image?","text":"<pre><code>docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock  wagoodman/dive testimage\n</code></pre> <p>``` [\u25cf Layers]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [Current Layer Contents]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Cmp   Size  Command                                                                     Permission     UID:GID       Size  Filetree      63 MB  FROM e388568efdf7281                                                        drwxr-xr-x         0:0     4.8 MB  \u251c\u2500\u2500 bin     988 kB  [ -z \"$(apt-get indextargets)\" ]                                            -rwxr-xr-x         0:0     1.1 MB  \u2502   \u251c\u2500\u2500 bash      745 B  set -xe   &amp;&amp; echo '#!/bin/sh' &gt; /usr/sbin/policy-rc.d  &amp;&amp; echo 'exit 101' &gt; -rwxr-xr-x         0:0      35 kB  \u2502   \u251c\u2500\u2500 bunzip2        7 B  mkdir -p /run/systemd &amp;&amp; echo 'docker' &gt; /run/systemd/container             -rwxr-xr-x         0:0        0 B  \u2502   \u251c\u2500\u2500 bzcat \u2192 bin/bunzip2        0 B  mkdir -p /hello/hello                                                       -rwxrwxrwx         0:0        0 B  \u2502   \u251c\u2500\u2500 bzcmp \u2192 bzdiff       37 B  #(nop) COPY file:666735678ded52c6f9e0693ca27b4dc3d466e3d79c585a58c3b9a91357 -rwxr-xr-x         0:0     2.1 kB  \u2502   \u251c\u2500\u2500 bzdiff       37 B  chmod 600 /hello/hello/hello.txt                                            -rwxrwxrwx         0:0        0 B  \u2502   \u251c\u2500\u2500 bzegrep \u2192 bzgrep                                                                                         -rwxr-xr-x         0:0     4.9 kB  \u2502   \u251c\u2500\u2500 bzexe [Layer Details]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 -rwxrwxrwx         0:0        0 B  \u2502   \u251c\u2500\u2500 bzfgrep \u2192 bzgrep                                                                                         -rwxr-xr-x         0:0     3.6 kB  \u2502   \u251c\u2500\u2500 bzgrep Tags:   (unavailable)                                                                   -rwxr-xr-x         0:0        0 B  \u2502   \u251c\u2500\u2500 bzip2 \u2192 bin/bunzip2 Id:     e388568efdf72814bd6439a80d822ce06b631689a82292a2b96382d020d63a4c                -rwxr-xr-x         0:0      14 kB  \u2502   \u251c\u2500\u2500 bzip2recover Digest: sha256:43c67172d1d182ca5460fc962f8f053f33028e0a3a1d423e05d91b532429e73d         -rwxrwxrwx         0:0        0 B  \u2502   \u251c\u2500\u2500 bzless \u2192 bzmore Command:                                                                                -rwxr-xr-x         0:0     1.3 kB  \u2502   \u251c\u2500\u2500 bzmore</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/2_Layering-Dockerfile/#nop-add-file08e718ed0796013f5957a1be7da3bef6225f3d82d8be0a86a7114e5caad50cbc-in-rwxr-xr-x-00-35-kb-cat","title":"(nop) ADD file:08e718ed0796013f5957a1be7da3bef6225f3d82d8be0a86a7114e5caad50cbc in /   -rwxr-xr-x         0:0      35 kB  \u2502   \u251c\u2500\u2500 cat","text":"<pre><code>                                                                                    -rwxr-xr-x         0:0      64 kB  \u2502   \u251c\u2500\u2500 chgrp\n</code></pre> <p>[Image Details]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 -rwxr-xr-x         0:0      60 kB  \u2502   \u251c\u2500\u2500 chmod                                                                                         -rwxr-xr-x         0:0      68 kB  \u2502   \u251c\u2500\u2500 chown Total Image size: 64 MB                                                                 -rwxr-xr-x         0:0     142 kB  \u2502   \u251c\u2500\u2500 cp Potential wasted space: 308 B                                                           -rwxr-xr-x         0:0     121 kB  \u2502   \u251c\u2500\u2500 dash Image efficiency score: 99 %                                                            -rwxr-xr-x         0:0     101 kB  \u2502   \u251c\u2500\u2500 date                                                                                         -rwxr-xr-x         0:0      76 kB  \u2502   \u251c\u2500\u2500 dd Count   Total Space  Path                                                               -rwxr-xr-x         0:0      85 kB  \u2502   \u251c\u2500\u2500 df     2         234 B  /var/lib/dpkg/diversions                                           -rwxr-xr-x         0:0     134 kB  \u2502   \u251c\u2500\u2500 dir     2          74 B  /hello/hello/hello.txt                                             -rwxr-xr-x         0:0      72 kB  \u2502   \u251c\u2500\u2500 dmesg                                                                                         -rwxrwxrwx         0:0        0 B  \u2502   \u251c\u2500\u2500 dnsdomainname \u2192 hostname                                                                                         -rwxrwxrwx         0:0        0 B  \u2502   \u251c\u2500\u2500 domainname \u2192 hostname                                                                                         -rwxr-xr-x         0:0      35 kB  \u2502   \u251c\u2500\u2500 echo                                                                                         -rwxr-xr-x         0:0       28 B  \u2502   \u251c\u2500\u2500 egrep                                                                                         -rwxr-xr-x         0:0      31 kB  \u2502   \u251c\u2500\u2500 false                                                                                         -rwxr-xr-x         0:0       28 B  \u2502   \u251c\u2500\u2500 fgrep                                                                                         -rwxr-xr-x         0:0      65 kB  \u2502   \u251c\u2500\u2500 findmnt                                                                                         -rwxr-xr-x         0:0     220 kB  \u2502   \u251c\u2500\u2500 grep                                                                                         -rwxr-xr-x         0:0     2.3 kB  \u2502   \u251c\u2500\u2500 gunzip                                                                                         -rwxr-xr-x         0:0     5.9 kB  \u2502   \u251c\u2500\u2500 gzexe                                                                                         -rwxr-xr-x         0:0     102 kB  \u2502   \u251c\u2500\u2500 gzip  ```</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/2_Layering-Dockerfile/#contributor","title":"Contributor","text":"<p>Prashansa Kulshrestha Ajeet S Raina</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/","title":"Lab #1: Create an image with GIT installed","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/#assignment","title":"Assignment:","text":"<ul> <li>Create an image with GIT installed</li> <li>Tag your image as labs-git:v1.0</li> <li>Create a container based on that image, and run git --version to check that it is installed correctly</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/#creating-dockerfile","title":"Creating Dockerfile","text":"<pre><code>FROM alpine:3.5\nRUN apk update\nRUN apk add git\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/#build-docker-image","title":"Build Docker Image","text":"<pre><code>docker build -t ajeetraina/alpine-git .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/#tagging-image-as-labs-git","title":"Tagging image as labs-git","text":"<pre><code>docker tag ajeetraina/alpine-git ajeetraina/labs-git:v1.0\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/#verify-the-images","title":"Verify the Images","text":"<pre><code>$ docker images\nREPOSITORY              TAG                 IMAGE ID            CREATED             SIZE\najeetraina/alpine-git   latest              cb913e37a593        16 seconds ago      26.6MB\najeetraina/labs-git     v1.0                cb913e37a593        16 seconds ago      26.6MB\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/#create-a-container","title":"Create a container","text":"<pre><code>docker run -itd ajeetraina/labs-git:v1.0 /bin/sh\n</code></pre> <pre><code>$ docker ps\nCONTAINER ID        IMAGE                      COMMAND             CREATED             STATUS              PORTS               NAMES\n3e26a5268f55        ajeetraina/labs-git:v1.0   \"/bin/sh\"           4 seconds ago       Up 2 seconds                            elated_neumann\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/#enter-into-container-shell","title":"Enter into Container Shell","text":"<pre><code>docker attach 3e26\n</code></pre> <p>Please press \"Enter\" key twice so as to enter into container shell</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/#verify-if-git-is-installed","title":"Verify if GIT is installed","text":"<pre><code>/ # git --version\ngit version 2.13.7\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/3_Lab1_dockerfile_git/#contributor","title":"Contributor","text":"<p>Ajeet S Raina</p> <p>Lab #2: Create an image with ADD instruction</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/","title":"Lab #2: Create an image with ADD instruction","text":"<p>COPY and ADD are both Dockerfile instructions that serve similar purposes. They let you copy files from a specific location into a Docker image.</p> <p>COPY takes in a src and destination. It only lets you copy in a local file or directory from your host (the machine building the Docker image) into the Docker image itself.</p> <p>ADD lets you do that too, but it also supports 2 other sources. First, you can use a URL instead of a local file / directory. Secondly, you can extract a tar file from the source directly into the destination.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/#assignment","title":"Assignment:","text":"<ul> <li>Create an image with ADD instruction</li> <li>Tag your image as labs-add:v1.0</li> <li>Create a container based on that image, and see the extracted tar file.</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/#creating-dockerfile","title":"Creating Dockerfile","text":"<pre><code>FROM alpine:3.5\nRUN apk update\nADD http://www.vlsitechnology.org/pharosc_8.4.tar.gz .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/#build-docker-image","title":"Build Docker Image","text":"<pre><code>docker build -t saiyam911/alpine-add . -f &lt;name of dockerfile&gt;\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/#tagging-image-as-labs-add","title":"Tagging image as labs-add","text":"<pre><code>docker tag saiyam911/alpine-add saiyam911/labs-add:v1.0\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/#verify-the-images","title":"Verify the Images","text":"<pre><code>$ docker images\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\nsaiyam911/alpine-add        latest              cdf97cb49d48        38 minutes ago       300MB\nsaiyam911/labs-add          v1.0                cdf97cb49d48        38 minutes ago       300MB\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/#create-a-container","title":"Create a container","text":"<pre><code>docker run -itd saiyam911/labs-add:v1.0 /bin/sh\n</code></pre> <pre><code>$ docker ps\nCONTAINER ID        IMAGE                      COMMAND             CREATED             STATUS              PORTS               NAMES\nf0940750f61a        saiyam911/labs-add:v1.0   \"/bin/sh\"           20 seconds ago      Up 18 seconds                           distracted_darwin\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/#enter-into-container-shell","title":"Enter into Container Shell","text":"<pre><code>docker attach f094\n</code></pre> <p>Please press \"Enter\" key twice so as to enter into container shell</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/#verify-if-the-link-has-been-extracted-onto-the-container","title":"Verify if the link has been extracted onto the container","text":"<pre><code>/ # ls -ltr\n-rw-------    1 root     root     295168000 Sep 19  2007 pharosc_8.4.tar.gz\n</code></pre> <p>ADD Command lets you to add a tar directly from a link and explode to the container.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/4_Lab2_Create-an-image-with-ADD-instruction/#contributor-saiyam-pathak","title":"Contributor - Saiyam Pathak","text":"<p>Lab #3: Create a Docker image with COPY instruction</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/","title":"Lab #3: Create an image with COPY instruction","text":"<p>The COPY instruction copies files or directories from source and adds them to the filesystem of the container at destinatio.</p> <p>Two form of COPY instruction</p> <pre><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;\nCOPY [--chown=&lt;user&gt;:&lt;group&gt;] [\"&lt;src&gt;\",... \"&lt;dest&gt;\"] (this form is required for paths containing whitespace)\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#assignment","title":"Assignment:","text":"<ul> <li>Create an image with COPY instruction</li> <li>COPY instruction in Multi-stage Builds</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#create-an-image-with-copy-instruction","title":"Create an image with COPY instruction","text":"<p>Dockerfile</p> <pre><code>FROM nginx:alpine\nLABEL maintainer=\"Collabnix\"\n\nCOPY index.html /usr/share/nginx/html/\nENTRYPOINT [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre> <p>Lets create the index.html file</p> <pre><code>$ echo \"Welcome to Dockerlabs !\" &gt; index.html\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#building-docker-image","title":"Building Docker Image","text":"<pre><code>$ docker image build -t cpy:v1 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#staring-the-container","title":"Staring the container","text":"<pre><code>$ docker container run -d --rm --name myapp1 -p 80:80 cpy:v1\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#checking-index-file","title":"Checking index file","text":"<pre><code>$ curl localhost\nWelcome to Dockerlabs !\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#copy-instruction-in-multi-stage-builds","title":"COPY instruction in Multi-stage Builds","text":"<p>Dockerfile</p> <pre><code>FROM alpine AS stage1\nLABEL maintainer=\"Collabnix\"\nRUN echo \"Welcome to Docker Labs!\" &gt; /opt/index.html\n\nFROM nginx:alpine\nLABEL maintainer=\"Collabnix\"\nCOPY --from=stage1 /opt/index.html /usr/share/nginx/html/\nENTRYPOINT [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#building-docker-image_1","title":"Building Docker Image","text":"<pre><code>$ docker image build -t cpy:v2 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#staring-the-container_1","title":"Staring the container","text":"<pre><code>$ docker container run -d --rm --name myapp2 -p 8080:80 cpy:v2\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#checking-index-file_1","title":"Checking index file","text":"<pre><code>$ curl localhost:8080\nWelcome to Docker Labs !\n</code></pre> <p>NOTE: You can name your stages, by adding an AS  to the FROM instruction.By default, the stages are not named, and you can refer to them by their integer number, starting with 0 for the first FROM instruction.You are not limited to copying from stages you created earlier in your Dockerfile, you can use the COPY --from instruction to copy from a separate image, either using the local image name, a tag available locally or on a Docker registry. <pre><code>COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/5_Lab3_dockerfile_copy/#contributor","title":"Contributor","text":"<p>Savio Mathew</p> <p>Next \u00bb Lab #4: CMD instruction</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/6_Lab4_cmd/","title":"Lab #4: Create an image with CMD instruction","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/6_Lab4_cmd/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/6_Lab4_cmd/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/6_Lab4_cmd/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/6_Lab4_cmd/#creating-dockerfile","title":"Creating Dockerfile","text":"<pre><code>FROM alpine:3.6\n\nRUN apk update\nCMD [\"top\"]\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/6_Lab4_cmd/#building-docker-container","title":"Building Docker Container","text":"<pre><code>docker build -t ajeetraina/lab3_cmd . -f Dockerfile_cmd\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/6_Lab4_cmd/#running-the-docker-container","title":"Running the Docker container","text":"<pre><code>docker run ajeetraina/lab3_cmd:latest\n</code></pre> <p>Lab #5: ENTRYPOINT instruction</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/","title":"Lab #5 : Create an image with ENTRYPOINT instruction","text":"<p>The <code>ENTRYPOINT</code> instruction make your container run as an executable.  ENTRYPOINT can be configured in two forms:  -  Exec Form              ENTRYPOINT [\"executable\", \"param1\", \"param2\"]    - Shell Form           ENTRYPOINT command param1 param2 </p> <p>If an image has an ENTRYPOINT if you pass an argument it, while running container it wont override the existing entrypoint, it will append what you passed with the entrypoint.To override the existing ENTRYPOINT you should user --entrypoint flag when running container.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#assignment","title":"Assignment:","text":"<ul> <li>Create an image with ENTRYPOINT instruction(Exec Form)</li> <li>ENTRYPOINT instruction in Shell Form</li> <li>Override the existing ENTRYPOINT</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#create-an-image-with-entrypoint-instructionexec-form","title":"Create an image with ENTRYPOINT instruction(Exec Form)","text":"<p>Dockerfile</p> <pre><code>FROM alpine:3.5\nLABEL maintainer=\"Collabnix\"\n\nENTRYPOINT [\"/bin/echo\", \"Hi, your ENTRYPOINT instruction in Exec Form !\"]\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#build-docker-image","title":"Build Docker Image","text":"<pre><code>$ docker build -t entrypoint:v1 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#verify-the-image","title":"Verify the Image","text":"<pre><code>$ docker image ls\n\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nentrypoint          v1                  1d06f06c2062        2 minutes ago       4MB\nalpine              3.5                 f80194ae2e0c        7 months ago        4MB\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#create-a-container","title":"Create a container","text":"<pre><code>$ docker container run entrypoint:v1\nHi, your ENTRYPOINT instruction in Exec Form !\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#entrypoint-instruction-in-shell-form","title":"ENTRYPOINT instruction in Shell Form","text":"<p>Dockerfile</p> <pre><code>$ cat Dockerfile \nFROM alpine:3.5\nLABEL maintainer=\"Collabnix\"\n\nENTRYPOINT echo \"Hi, your ENTRYPOINT instruction in Shell Form !\"\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#build-docker-image_1","title":"Build Docker Image","text":"<pre><code>$ docker build -t entrypoint:v2 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#verify-the-image_1","title":"Verify the Image","text":"<pre><code>$ docker image ls\n\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nentrypoint          v2                  cde521f13080        2 minutes ago       4MB\nentrypoint          v1                  1d06f06c2062        5 minutes ago      4MB\nalpine              3.5                 f80194ae2e0c        7 months ago        4MB\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#create-a-container_1","title":"Create a container","text":"<pre><code>$ docker container run entrypoint:v2\nHi, your ENTRYPOINT instruction in Shell Form !\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#override-the-existing-entrypoint","title":"Override the existing ENTRYPOINT","text":"<pre><code>$ docker container run --entrypoint \"/bin/echo\" entrypoint:v2 \"Hello, Welocme to Docker Meetup! \"\nHello, Welocme to Docker Meetup! \n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/7_Lab5_Entrypoint/#contributor","title":"Contributor","text":"<p>Savio Mathew</p> <p>Lab #6: WORKDIR instruction</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/","title":"Lab #6: WORKDIR instruction","text":"<p>The <code>WORKDIR</code> directive in <code>Dockerfile</code> defines the working directory for the rest of the instructions in the Dockerfile. The WORKDIR instruction wont create a new layer in the image but will add metadata to the image config. If the WORKDIR doesn\u2019t exist, it will be created even if it\u2019s not used in any subsequent Dockerfile instruction. you can have multiple WORKDIR in same Dockerfile. If a relative path is provided, it will be relative to the previous WORKDIR instruction.</p> <pre><code>WORKDIR /path/to/workdir\n</code></pre> <p>If no WORKDIR is specified in the Dockerfile then the default path is <code>/</code>. The WORKDIR instruction can resolve environment variables previously set in Dockerfile using ENV.</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#assignment","title":"Assignment","text":"<ul> <li>Dockerfile with WORKDIR instruction</li> <li>WORKDIR with Relative path</li> <li>WORKDIR with Absolute path</li> <li>WORKDIR with environment variables as path </li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#dockerfile-with-workdir-instruction","title":"Dockerfile with WORKDIR instruction","text":"<p>Dockerfile</p> <pre><code>FROM alpine:3.9.3\nLABEL maintainer=\"Collabnix\"\n\nWORKDIR /opt\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#building-docker-image","title":"Building Docker image","text":"<pre><code>$ docker build -t workdir:v1 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#testing-current-workdir-by-running-container","title":"Testing current WORKDIR by running container","text":"<pre><code>$ docker run -it workdir:v1 pwd\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#workdir-with-relative-path","title":"WORKDIR with relative path","text":"<p>Dockerfile</p> <pre><code>FROM alpine:3.9.3\nLABEL maintainer=\"Collabnix\"\n\nWORKDIR /opt\nRUN echo \"Welcome to Docker Labs\" &gt; opt.txt\nWORKDIR folder1\nRUN echo \"Welcome to Docker Labs\" &gt; folder1.txt\nWORKDIR folder2\nRUN echo \"Welcome to Docker Labs\" &gt; folder2.txt\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#building-docker-image_1","title":"Building Docker image","text":"<pre><code>$ docker build -t workdir:v2 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#testing-current-workdir-by-running-container_1","title":"Testing current WORKDIR by running container","text":"<pre><code>$ docker run -it workdir:v2 pwd\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#workdir-with-absolute-path","title":"WORKDIR with Absolute path","text":"<p>Dockerfile</p> <pre><code>FROM alpine:3.9.3\nLABEL maintainer=\"Collabnix\"\n\nWORKDIR /opt/folder1\nRUN echo \"Welcome to Docker Labs\" &gt; opt.txt\nWORKDIR /var/tmp/\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#building-docker-image_2","title":"Building Docker image","text":"<pre><code>$ docker build -t workdir:v3 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#testing-current-workdir-by-running-container_2","title":"Testing current WORKDIR by running container","text":"<pre><code>$ docker run -it workdir:v3 pwd\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#workdir-with-environment-variables-as-path","title":"WORKDIR with environment variables as path","text":"<p>Dockerfile</p> <pre><code>FROM alpine:3.9.3\nLABEL maintainer=\"Collabnix\"\n\nENV DIRPATH /myfolder\nWORKDIR $DIRPATH\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#building-docker-image_3","title":"Building Docker image","text":"<pre><code>$ docker build -t workdir:v4 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#testing-current-workdir-by-running-container_3","title":"Testing current WORKDIR by running container","text":"<pre><code>$ docker run -it workdir:v4 pwd\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/8_Lab6_workdir/#contributor","title":"Contributor","text":"<p>Savio Mathew</p> <p>Next &gt;&gt; Lab #7: RUN instruction</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/","title":"Lab #7: RUN instruction","text":"<p>The <code>RUN</code> instruction execute command on top of the below layer and create a new layer.  RUN instruction can be wrote in two forms: - RUN  (shell form) - RUN [\"executable\", \"param1\", \"param2\"] (exec form)"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#pre-requisite","title":"Pre-requisite:","text":""},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time  Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#pre-requisite_1","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser </li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#assignment","title":"Assignment:","text":"<ul> <li>Create an image with RUN instruction</li> <li>Combining multiple RUN instruction to one</li> </ul>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#create-an-image-with-run-instruction","title":"Create an image with RUN instruction","text":"<pre><code>FROM alpine:3.9.3\nLABEL maintainer=\"Collabnix\"\nRUN apk add --update \nRUN apk add curl\nRUN rm -rf /var/cache/apk/\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#building-docker-image","title":"Building Docker image","text":"<pre><code>$ docker image build -t run:v1 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#checking-layer-of-the-image","title":"Checking layer of the image","text":"<pre><code>$  docker image history run:v1 \nIMAGE               CREATED             CREATED BY                                      SIZE                \nNT\n5b09d7ba1736        19 seconds ago      /bin/sh -c rm -rf /var/cache/apk/               0B                  \n192115cc597a        21 seconds ago      /bin/sh -c apk add curl                         1.55MB              \n0518580850f1        43 seconds ago      /bin/sh -c apk add --update                     1.33MB              \n8590497d994e        45 seconds ago      /bin/sh -c #(nop)  LABEL maintainer=Collabnix   0B                  \ncdf98d1859c1        4 months ago        /bin/sh -c #(nop)  CMD [\"/bin/sh\"]              0B                  \n&lt;missing&gt;           4 months ago        /bin/sh -c #(nop) ADD file:2e3a37883f56a4a27\u2026   5.53MB \n</code></pre> <p>Number of layers 6</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#checking-image-size","title":"Checking image size","text":"<pre><code>$ docker image ls run:v1\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nrun                 v1                  5b09d7ba1736        4 minutes ago       8.42MB\n</code></pre> <p>Its 8.42MB</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#combining-multiple-run-instruction-to-one","title":"Combining multiple RUN instruction to one","text":"<pre><code>FROM alpine:3.9.3\nLABEL maintainer=\"Collabnix\"\nRUN apk add --update &amp;&amp; \\\n    apk add curl  &amp;&amp; \\  \n    rm -rf /var/cache/apk/\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#building-docker-image_1","title":"Building Docker image","text":"<pre><code>$ docker image build -t run:v2 .\n</code></pre>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#checking-layer-of-the-image_1","title":"Checking layer of the image","text":"<pre><code>$ docker image history run:v2\nIMAGE               CREATED             CREATED BY                                      SIZE            \nNT\n784298155541        50 seconds ago      /bin/sh -c apk add --update  &amp;&amp; apk add curl\u2026   1.55MB              \n8590497d994e        8 minutes ago       /bin/sh -c #(nop)  LABEL maintainer=Collabnix   0B                  \ncdf98d1859c1        4 months ago        /bin/sh -c #(nop)  CMD [\"/bin/sh\"]              0B                  \n&lt;missing&gt;           4 months ago        /bin/sh -c #(nop) ADD file:2e3a37883f56a4a27\u2026   5.53MB\n</code></pre> <p>Number of layers 4</p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#checking-image-size_1","title":"Checking image size","text":"<pre><code>$ docker image ls run:v2\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nrun                 v2                  784298155541        3 minutes ago       7.08MB\n</code></pre> <p>its now 7.08MB </p>"},{"location":"3_Docker-For-Beginners/3_Getting-Started-with-Dockerfile/9_Lab8_run/#contributor","title":"Contributor","text":"<p>Savio Mathew</p> <p>Next \u00bb Lab #8: ARG instruction</p>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/","title":"Docker compose","text":"<p>Docker compose is a tool built by Docker team to ease the task to creating and configuring multiple containers in a development environment counter-part of docker-compose  for prodcution environment is <code>docker swarm</code>. Docker compose takes as input a <code>YAML</code> configuration file and creates the resources (containers, networks, volumes etc.)  by communicating with the docker daemon through Docker API.</p>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/#introduction-to-compose","title":"Introduction to Compose","text":"<p><code>Compose</code> project is the official open source project for Docker and is responsible for the rapid orchestration of Docker container clusters. Functionally, it is very similar to Heat OpenStack .</p> <p>The code is currently open sourced at https://github.com/docker/compose .</p> <p><code>Compose</code> positioned as \"Defining and running multi-container Docker applications\", and its predecessor is the open source project Fig.</p> <p>Through the introduction in the first part, we know that using a Dockerfile template file allows users to easily define a separate application container. However, in daily work, it is often the case that multiple containers need to cooperate to complete a certain task. For example, to implement a Web project, in addition to the Web service container itself, it is often necessary to add a back-end database service container, and even a load balancing container.</p> <p><code>Compose</code> just meets this need. It allows the user to define a set of associated application containers as a project through a separate docker-compose.yml template file (YAML format).</p> <p>There are two important concepts in Compose :</p> <p><code>Service:</code> A container for an application that can actually include several container instances running the same image.</p> <p>Project: A complete business unit consisting of a set of associated application containers, defined in the <code>docker-compose.yml</code>file.</p> <p><code>Compose</code> 's default management object is a project that provides convenient lifecycle management of a set of containers in a project through subcommands.</p> <p><code>Compose</code> project is written in Python, and the implementation calls the API provided by the Docker service to manage the container. Therefore, as long as the platform being operated supports the Docker API, you can use Compose to manage it.</p>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/#compose-file-used-in-examples","title":"Compose file used in examples","text":"<pre><code>version: '3'\n\nservices:\n    web:\n        build: .\n        image: web-client\n        depends_on:\n        - server\n        ports:\n        - \"8080:8080\"\n    server:\n        image: akshitgrover/helloworld\n        volumes:\n        - \"/app\" # Anonymous volume\n        - \"data:/data\" # Named volume\n        - \"mydata:/data\" # External volume\n\nvolumes:\n    data:\n    mydata:\n        external: true\n</code></pre> <p>Refer this for configuring your compose file.</p>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/#cli-cheatsheet","title":"CLI Cheatsheet","text":"<ul> <li>Docker compose</li> <li>Compose file used in examples</li> <li>CLI Cheatsheet<ul> <li>Build</li> <li>Bundle</li> <li>Config</li> <li>Up</li> <li>Down</li> <li>Scale</li> <li>Start</li> <li>Stop</li> </ul> </li> </ul>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/#build","title":"Build","text":"<p>Used to build services specified in docker-compose.yml file with <code>build</code> specification.</p> <p>Refer this for more details.</p> <p>Note: Images build will be tagged as {DIR}_{SERVICE} unless image name is specified in the service specification.</p> <pre><code>docker-compose build [OPTIONS] [SERVICE...]\n\nOPTIONS:\n\n--compress | Command line flag to compress the build context, Build context is nothing but a directory where docker-compose.yml file is located. As this directory can container a lot of files, sending build context to the container can take a lot of time thus compression is needed.\n\n--force-rm | Remove any intermediate container while building.\n\n--no-cache | Build images without using any cached layers from previoud builds.\n\n--pull | Allways pull newer version of the base image.\n\n-m, --memory | Set memory limit for the container used for building the image.\n\n--parallel | Exploit go routines to parallely build images, As docker daemon is written in go.\n\n--build-arg key=val | Pass any varaible to the dockerfile from the command line.\n\n\nSERVICE:\n\nIf you want to build any particular services instead of every service specified in the compose file pass the name (same as in the compose file) as arguments to the command.\n\nExample:\n\ndocker-compose build --compress     # Will compress the build context of service web.\n\n</code></pre>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/#bundle","title":"Bundle","text":"<p>Used to generate distributed application bundle (DAB) from the compose file.</p> <p>Refer this for more details about DBA.</p> <pre><code>docker-compose bundle [OPTIONS]\n\nOPTIONS:\n\n--push-image | Push images to the register if any service has build specifcation.\n\n-o, --output PATH | Output path for .dab file.\n</code></pre>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/#config","title":"Config","text":"<p>Used to validate the compose file</p> <p>NOTE: Run this command in directory where docker-compose.yml file is located.</p> <pre><code>docker-compose config\n</code></pre>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/#up","title":"Up","text":"<p>Creates and starts the resources as per the specification the docker-compose.yml file.</p> <pre><code>docker-compose up [OPTIONS] [SERVICE...]\n\nOPTIONS:\n\n-d, --detach | Run containers in background.\n\n--build | Always build images even if it exists.\n\n--no-deps | Avoid creating any linked services.\n\n--force-recreate | Force recreating containers even if specification is not changed.\n\n--no-recreate | Do not recreate containers.\n\n--no-build | Do not build any image even if it is missing.\n\n--no-start | Just create the containers without starting them.\n\n--scale SERVICE=NUM | Create multiple containers for a service.\n\n-V, --renew-anon-volumes | Recreate anonymous volumes instead of getting data from previous ones.\n\nExample:\n\ndocker-compose up -d        # Will run service containers in background\ndocker-compose up web       # Will start service web and server because of 'depends_on' field\ndocker-compose up server    # will start server service only.\n</code></pre>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/#down","title":"Down","text":"<p>Stop and clear any resources created while lifting docker-compose.</p> <p>By default only containers and networks defined in the compose file are removed. Networks and Volumes with external = true and never removed.</p> <pre><code>docker-compose down [OPTIONS]\n\n--rmi type | Remove images Type = all (Remove every image in the compose file), local (Remove images with no custom tag)\n\n-v, --volumes | Remove named volumes except the external ones and also remove anonymous volumes\n\n-t, --timeout TIMEOUT | Speficy shutdown time in seconds. (default = 10)\n\nExample:\n\ndocker-compose down         # Will delete all containers of both web and server and no volume will be removed\n\ndocker-compose down -v      # Will also delete anonymous and data volumes.\n</code></pre>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/#scale","title":"Scale","text":"<p>Scale particular services</p> <pre><code>docker-compose scale [SERVICE=NUM...]\n\nExample:\n\ndocker-compose scale server=3 web=2\n</code></pre>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/#start","title":"Start","text":"<p>Start created containers.</p> <pre><code>docker-compose start [SERVICE...]\n\nExample:\n\ndocker-compose start        # Start containers for every service.\ndocker-compose start web    # Start containers only for service web. \n</code></pre>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/#stop","title":"Stop","text":"<p>Stop running containers.</p> <pre><code>docker-compose stop [SERVICE...]\n\nExample:\n\ndocker-compose stop         # Stop containers for every service.\ndocker-compose stop web     # Stop containers only for service web.\n</code></pre>"},{"location":"4_Docker-for-Intermediate/1_Docker_Compose/#contributor","title":"Contributor","text":"<p>Akshit Grover Sangam Biradar</p> <p>Next &gt;&gt; Docker Compose Cheatsheet </p>"},{"location":"4_Docker-for-Intermediate/2_Dockerfile-vs-DockerCompose/","title":"Difference between Dockerfile and docker-compose","text":"<p>A Dockerfile is a text document that contains all the commands/Instruction a user could call on the command line to assemble an image. For example</p> <pre><code>FROM centos:latest\nLABEL maintainer=\"collabnix\"\nRUN yum update -y &amp;&amp; \\\n    yum install -y httpd net-tools &amp;&amp; \\\n    mkdir -p /run/httpd \nEXPOSE 80\nENTRYPOINT apachectl \"-DFOREGROUND\"\n</code></pre> <p>Using docker build commmand we can build an image from a Dockerfile.</p> <p>Docker Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application\u2019s services. Then, with a single command, you create and start all the services from your configuration. By default, docker-compose expects the name of the Compose file as docker-compose.yml or docker-compose.yaml. If the compose file have different name we can specify it with -f flag.</p> <p>A docker-compose.yml looks like this:</p> <pre><code>version: '3'\nservices:\n  web:\n    build: .\n    ports:\n    - \"5000:5000\"\n    volumes:\n    - .:/code\n    - logvolume01:/var/log\n    links:\n    - redis\n  redis:\n    image: redis\nvolumes:\n  logvolume01: {}\n</code></pre>"},{"location":"4_Docker-for-Intermediate/2_Dockerfile-vs-DockerCompose/#contributor","title":"Contributor","text":"<p>Savio Mathew</p> <p>How to Install Docker Compose?</p>"},{"location":"4_Docker-for-Intermediate/3_Docker-Compose-Installation/","title":"Note","text":"<p>Docker Compose comes inbult with Docker Desktop, this tutorial is only applicable for those who installed it manually.</p>"},{"location":"4_Docker-for-Intermediate/3_Docker-Compose-Installation/#how-to-install-docker-compose","title":"How to Install Docker Compose?","text":"<p>Docker Compose is available on multiple platforms.In this lab we\u2019ll demonstrate some of the ways to install it on Linux, Windows and Mac.</p>"},{"location":"4_Docker-for-Intermediate/3_Docker-Compose-Installation/#installing-docker-compose-on-linux","title":"Installing Docker Compose on Linux","text":"<p>Installing Docker Compose on Linux is a two-step process. Firt you will be downloading binary from github, Second giving executable permission.</p> <p>Download the current stable release of Docker Compose</p> <pre><code>$ curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n$ chmod +x /usr/local/bin/docker-compose\n</code></pre>"},{"location":"4_Docker-for-Intermediate/3_Docker-Compose-Installation/#test-the-installation","title":"Test the installation","text":"<p>You can run this command from a terminal window</p> <pre><code>$ docker-compose --version\n</code></pre>"},{"location":"4_Docker-for-Intermediate/3_Docker-Compose-Installation/#installing-docker-compose-on-windows-10","title":"Installing Docker Compose on Windows 10","text":"<p>If you have already installed Docker Desktop for Windows or Docker Toolbox then no need of separate installation for docker compose, since its part of the package.</p>"},{"location":"4_Docker-for-Intermediate/3_Docker-Compose-Installation/#check-docker-compose-is-installed","title":"Check Docker Compose is installed","text":"<p>You can run this command from a PowerShell or CMD terminal.</p> <pre><code>docker-compose --version\n</code></pre>"},{"location":"4_Docker-for-Intermediate/3_Docker-Compose-Installation/#installing-docker-compose-on-mac","title":"Installing Docker Compose on Mac","text":"<p>Docker Compose is installed as part of Docker for Mac. So if you have Docker for MAC, you have Docker Compose.</p>"},{"location":"4_Docker-for-Intermediate/3_Docker-Compose-Installation/#check-docker-compose-is-installed_1","title":"Check Docker Compose is installed","text":"<p>You can run this command from a terminal window.</p> <pre><code>$ docker-compose --version\n</code></pre>"},{"location":"4_Docker-for-Intermediate/3_Docker-Compose-Installation/#contributor","title":"Contributor","text":"<p>Savio Mathew</p>"},{"location":"6_Accessing-And-Managing-Docker-Container/Accessing-The-Container-Shell/","title":"Accessing the Container Shell","text":""},{"location":"6_Accessing-And-Managing-Docker-Container/Accessing-The-Container-Shell/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time Play with Docker 1 5 min"},{"location":"6_Accessing-And-Managing-Docker-Container/Accessing-The-Container-Shell/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser</li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"6_Accessing-And-Managing-Docker-Container/Accessing-The-Container-Shell/#create-ubuntu-container","title":"Create Ubuntu Container","text":"<pre><code>docker run -dit ubuntu\n</code></pre>"},{"location":"6_Accessing-And-Managing-Docker-Container/Accessing-The-Container-Shell/#accessing-the-container-shell_1","title":"Accessing the container shell","text":"<pre><code>docker exec -ti &lt;container-id&gt; bash\n</code></pre>"},{"location":"6_Accessing-And-Managing-Docker-Container/Accessing-The-Container-Shell/#accesssing-the-container-shell","title":"Accesssing the container shell","text":"<pre><code>docker attach &lt;container-id&gt;\n</code></pre>"},{"location":"6_Accessing-And-Managing-Docker-Container/Managing-Docker-Containers/","title":"Managing Docker containers","text":""},{"location":"6_Accessing-And-Managing-Docker-Container/Managing-Docker-Containers/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time Play with Docker 1 5 min"},{"location":"6_Accessing-And-Managing-Docker-Container/Managing-Docker-Containers/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser</li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"6_Accessing-And-Managing-Docker-Container/Managing-Docker-Containers/#preparations","title":"Preparations","text":"<ul> <li>Clean your docker host using the commands (in bash):</li> </ul> <pre><code>$ docker rm -f $(docker ps -a -q)\n</code></pre>"},{"location":"6_Accessing-And-Managing-Docker-Container/Managing-Docker-Containers/#instructions","title":"Instructions","text":"<ul> <li>Run the following containers from the dockerhub:</li> </ul> <p><code>$ docker run -d -p 5000:5000 --name app1 selaworkshops/python-app:1.0</code></p> <p><code>$ docker run -d -p 5001:5001 -e \"port=5001\" --name app2 selaworkshops/python-app:2.0</code> * Ensure the containers are running:</p> <p><code>$ docker ps</code> * Stop the first container:</p> <p><code>$ docker stop app1</code> * Kill the second container:</p> <p><code>$ docker kill app2</code> * Display running containers:</p> <p><code>$ docker ps</code> * Show all the containers (includind non running containers):</p> <p><code>$ docker ps -a</code> * Let\u2019s start both containers again:</p> <p><code>$ docker start app1 app2</code> * Restart the second container:</p> <p><code>$ docker restart app2</code> * Display the docker host information with:</p> <p><code>$ docker info</code> * Show the running processes in the first container using:</p> <p><code>$ docker top app1</code> * Retrieve the history of the second container:</p> <p><code>$ docker history selaworkshops/python-app:2.0</code> * Inspect the second container image:</p> <p><code>$ docker inspect selaworkshops/python-app:2.0</code> * Inspect the first container and look for the internal ip:</p> <p><code>$ docker inspect app1</code></p> <p><code>\"Networks\": {                \"bridge\": {                    \"IPAMConfig\": null,                    \"Links\": null,                    \"Aliases\": null,                    \"NetworkID\": \"822cb66790c6358d9decab874916120f3bdeff7193a4375c94ca54d50832303d\",                    \"EndpointID\": \"9aa96dc29be08eddc6d8f429ebecd2285c064fda288681a3611812413cbdfc1f\",                    \"Gateway\": \"172.17.0.1\",                    \"IPAddress\": \"172.17.0.3\",                    \"IPPrefixLen\": 16,                    \"IPv6Gateway\": \"\",                    \"GlobalIPv6Address\": \"\",                    \"GlobalIPv6PrefixLen\": 0,                    \"MacAddress\": \"02:42:ac:11:00:03\",                    \"DriverOpts\": null                }            }</code> * Show the logs of the second container using the flag \u2013follow:</p> <p><code>$ docker logs --follow app2</code> * Browse to the application and see the containers logs from the terminal:</p> <p><code>http://localhost:5001</code> * Stop to tracking logs:</p> <p><code>$ CTRL + C</code></p>"},{"location":"6_Accessing-And-Managing-Docker-Container/Running-A-Command-Inside-Running-Container/","title":"Running a command inside running Container","text":""},{"location":"6_Accessing-And-Managing-Docker-Container/Running-A-Command-Inside-Running-Container/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time Play with Docker 1 5 min"},{"location":"6_Accessing-And-Managing-Docker-Container/Running-A-Command-Inside-Running-Container/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser</li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"6_Accessing-And-Managing-Docker-Container/Running-A-Command-Inside-Running-Container/#create-ubuntu-container","title":"Create Ubuntu Container","text":"<pre><code>docker run -dit ubuntu\n</code></pre>"},{"location":"6_Accessing-And-Managing-Docker-Container/Running-A-Command-Inside-Running-Container/#opening-up-the-bash-shell","title":"Opening up the bash shell","text":"<pre><code>docker exec -t &lt;container-id&gt; bash\n</code></pre>"}]}